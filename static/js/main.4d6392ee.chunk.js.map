{"version":3,"sources":["logo.svg","Home.js","App.js","reportWebVitals.js","index.js"],"names":["synth","Tone","toDestination","keyDown","Home","props","state","Distortion","ReverbRoom","ReverbWet","VibratoFreq","VibratoPitch","LowpassCut","synthState","Octave","synthControl","bind","synthOff","updateDistortion","updateReverbRoom","updateReverbWet","updateVibratoFreq","updateVibratoPitch","updateLowpassCut","resetSynth","document","addEventListener","this","querySelector","a","console","log","removeEventListener","event","now","note","currOctave","newOctave","key","toString","triggerAttack","includes","triggerRelease","distortion","reverb","roomSize","wet","vibrato","frequency","depth","lowpass","limiter","chain","newDistortion","target","value","setState","newReverbRoom","newReverbWet","newVibratoFreq","newVibratoPitch","newLowpassCut","id","Row","Col","Container","min","max","step","onChange","Component","Nomatch","className","App","Fragment","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gNAAe,I,8GCOXA,GAAQ,IAAIC,KAAaC,gBAEzBC,GAAU,EAiTCC,E,kDA9Sb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,WAAY,EACZC,WAAY,EACZC,UAAW,EACXC,YAAa,IACbC,aAAc,EACdC,WAAY,GAGd,EAAKC,WAAa,CAChBC,OAAQ,EACRP,WAAY,EACZC,WAAY,EACZC,UAAW,EACXC,YAAa,IACbC,aAAc,EACdC,WAAY,GAId,EAAKG,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBACxB,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,gBACxB,EAAKI,gBAAkB,EAAKA,gBAAgBJ,KAArB,gBACvB,EAAKK,kBAAoB,EAAKA,kBAAkBL,KAAvB,gBACzB,EAAKM,mBAAqB,EAAKA,mBAAmBN,KAAxB,gBAC1B,EAAKO,iBAAmB,EAAKA,iBAAiBP,KAAtB,gBACxB,EAAKQ,WAAa,EAAKA,WAAWR,KAAhB,gBA/BD,E,qDAmCnB,WAAoB,IAAD,EAChBS,SAASC,iBAAiB,UAAWC,KAAKZ,cAAc,GACxDU,SAASC,iBAAiB,QAASC,KAAKV,UAAU,GAClD,UAAAQ,SAASG,cAAc,iBAAvB,SAAkCF,iBAAiB,QAAnD,sBAA4D,sBAAAG,EAAA,sEACtD5B,MADsD,OAE5D6B,QAAQC,IAAI,kBAFgD,8C,kCAO9D,WACGN,SAASO,oBAAoB,UAAWL,KAAKZ,cAAc,GAC3DU,SAASO,oBAAoB,QAASL,KAAKV,UAAU,K,0BAIzD,SAAagB,GACT,IAAMC,EAAMjC,MACRkC,EAAO,GACPC,EAAa,EACbC,EAAY,EACC,MAAdJ,EAAMK,KAAgBnC,EAKH,MAAd8B,EAAMK,KAAgBnC,EAKR,MAAd8B,EAAMK,KAAgBnC,EAKR,MAAd8B,EAAMK,KAAgBnC,EAKR,MAAd8B,EAAMK,KAAgBnC,EAKR,MAAd8B,EAAMK,KAAgBnC,EAKR,MAAd8B,EAAMK,KAAgBnC,EAKR,MAAd8B,EAAMK,KAAgBnC,EAOR,MAAd8B,EAAMK,KAEZF,EAAaT,KAAKd,WAAWC,QAEZ,IACfuB,EAAYD,EAAa,EACzBT,KAAKd,WAAWC,OAASuB,GAGP,MAAdJ,EAAMK,MAEZF,EAAaT,KAAKd,WAAWC,QAEZ,IACfuB,EAAYD,EAAa,EACzBT,KAAKd,WAAWC,OAASuB,IArB3BD,EAAaT,KAAKd,WAAWC,OAE7BqB,EAAO,KADPC,GAA0B,GACFG,WACxBvC,EAAMwC,cAAcL,EAAMD,GAC1B/B,GAAU,IATVgC,EAAO,IAAMR,KAAKd,WAAWC,OAAOyB,WACpCvC,EAAMwC,cAAcL,EAAMD,GAC1B/B,GAAU,IAPVgC,EAAO,IAAMR,KAAKd,WAAWC,OAAOyB,WACpCvC,EAAMwC,cAAcL,EAAMD,GAC1B/B,GAAU,IAPVgC,EAAO,IAAMR,KAAKd,WAAWC,OAAOyB,WACpCvC,EAAMwC,cAAcL,EAAMD,GAC1B/B,GAAU,IAPVgC,EAAO,IAAMR,KAAKd,WAAWC,OAAOyB,WACpCvC,EAAMwC,cAAcL,EAAMD,GAC1B/B,GAAU,IAPVgC,EAAO,IAAMR,KAAKd,WAAWC,OAAOyB,WACpCvC,EAAMwC,cAAcL,EAAMD,GAC1B/B,GAAU,IAPVgC,EAAO,IAAMR,KAAKd,WAAWC,OAAOyB,WACpCvC,EAAMwC,cAAcL,EAAMD,GAC1B/B,GAAU,IAPVgC,EAAO,IAAMR,KAAKd,WAAWC,OAAOyB,WACpCvC,EAAMwC,cAAcL,EAAMD,GAC1B/B,GAAU,K,sBA4DhB,SAAS8B,GACP,IAAMC,EAAMjC,MAEE,WACHwC,SAASR,EAAMK,OACxBtC,EAAM0C,eAAeR,GACrB/B,GAAU,K,wBAKd,WAGE,IAAMwC,EAAa,IAAI1C,IAAgB0B,KAAKd,WAAWN,YAAYL,gBAE7D0C,EAAS,IAAI3C,IAAc,CAC/B4C,SAAUlB,KAAKd,WAAWL,WAC1BsC,IAAKnB,KAAKd,WAAWJ,YACpBP,gBAEG6C,EAAU,IAAI9C,IAAa,CAC/B+C,UAAWrB,KAAKd,WAAWH,YAC3BuC,MAAOtB,KAAKd,WAAWF,eACtBT,gBAEGgD,EAAU,IAAIjD,IAAY0B,KAAKd,WAAWD,WAAY,WAAWV,gBAGjEiD,EAAU,IAAIlD,KAAa,KAAKC,gBAEtCF,GAAQ,IAAIC,KAAamD,MAAMT,EAAYC,EAAQG,EAASG,EAASC,GAASjD,kB,8BAIhF,SAAiB+B,GACf,IAAIoB,EAAgBpB,EAAMqB,OAAOC,MACjC5B,KAAKd,WAAWN,WAAa8C,EAC7B1B,KAAK6B,SAAS,CAACjD,WAAY8C,IAE3B1B,KAAKH,e,8BAIP,SAAiBS,GACf,IAAIwB,EAAgBxB,EAAMqB,OAAOC,MACjC5B,KAAKd,WAAWL,WAAaiD,EAC7B9B,KAAK6B,SAAS,CAAChD,WAAYiD,IAE3B9B,KAAKH,e,6BAIP,SAAgBS,GACd,IAAIyB,EAAezB,EAAMqB,OAAOC,MAChC5B,KAAKd,WAAWJ,UAAYiD,EAC5B/B,KAAK6B,SAAS,CAAC/C,UAAWiD,IAE1B/B,KAAKH,e,+BAIP,SAAkBS,GAChB,IAAI0B,EAAiB1B,EAAMqB,OAAOC,MAClC5B,KAAKd,WAAWH,YAAciD,EAC9BhC,KAAK6B,SAAS,CAAC9C,YAAaiD,IAE5BhC,KAAKH,e,gCAIP,SAAmBS,GACjB,IAAI2B,EAAkB3B,EAAMqB,OAAOC,MACnC5B,KAAKd,WAAWF,aAAeiD,EAC/BjC,KAAK6B,SAAS,CAAC7C,aAAciD,IAE7BjC,KAAKH,e,8BAIP,SAAiBS,GACf,IAAI4B,EAAgB5B,EAAMqB,OAAOC,MACjC5B,KAAKd,WAAWD,WAAaiD,EAC7BlC,KAAK6B,SAAS,CAAC5C,WAAYiD,IAE3BlC,KAAKH,e,oBAGP,WACE,OACE,qCACA,wBAAQsC,GAAG,SAAX,wBACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,8CAGJ,eAACD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,4CAEF,eAACA,EAAA,EAAD,WACE,kFACA,qFACA,gGAGJ,iDACA,cAACC,EAAA,EAAD,UACE,cAACD,EAAA,EAAD,UACA,cAAC,iBAAD,CACEE,IAAK,EACLC,IAAK,GACLZ,MAAO5B,KAAKrB,MAAMC,WAClB6D,KAAM,GACNC,SAAU1C,KAAKT,uBAInB,uCACA,eAAC+C,EAAA,EAAD,WACE,eAACD,EAAA,EAAD,WACE,0CACA,cAAC,iBAAD,CACEE,IAAK,EACLC,IAAK,GACLZ,MAAO5B,KAAKrB,MAAME,WAClB4D,KAAM,GACNC,SAAU1C,KAAKR,sBAGnB,eAAC6C,EAAA,EAAD,WACE,yDACA,cAAC,iBAAD,CACEE,IAAK,EACLC,IAAK,GACLZ,MAAO5B,KAAKrB,MAAMG,UAClB2D,KAAM,GACNC,SAAU1C,KAAKP,wBAIrB,wCACA,eAAC6C,EAAA,EAAD,WACE,eAACD,EAAA,EAAD,WACE,0CACA,cAAC,iBAAD,CACEE,IAAK,IACLC,IAAK,IACLZ,MAAO5B,KAAKrB,MAAMI,YAClB0D,KAAM,EACNC,SAAU1C,KAAKN,uBAGnB,eAAC2C,EAAA,EAAD,WACE,iDACA,cAAC,iBAAD,CACEE,IAAK,EACLC,IAAK,GACLZ,MAAO5B,KAAKrB,MAAMK,aAClByD,KAAM,GACNC,SAAU1C,KAAKL,2BAIrB,+CACA,cAAC2C,EAAA,EAAD,UACE,eAACD,EAAA,EAAD,WACE,iDACA,cAAC,iBAAD,CACEE,IAAK,EACLC,IAAK,IACLZ,MAAO5B,KAAKrB,MAAMM,WAClBwD,KAAM,GACNC,SAAU1C,KAAKJ,+B,GAtSV+C,aCLbC,EAAU,kBACd,qBAAKC,UAAY,QAAjB,SACA,4DAiBaC,MAbf,WACE,OACE,cAAC,IAAMC,SAAP,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYzE,IAClC,cAAC,IAAD,CAAOyE,UAAYN,YCNdO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhE,SAASiE,eAAe,SAM1BZ,M","file":"static/js/main.4d6392ee.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\r\nimport { Container, Button, Row, Col, Form } from 'react-bootstrap';\r\nimport * as Tone from 'tone';\r\nimport { RangeStepInput } from 'react-range-step-input';\r\n\r\n// Global variables defined here\r\n// synth is the synth used on the entire page\r\nvar synth = new Tone.Synth().toDestination();\r\n// keyDown keeps track if the key is pressed or not (note is playing)\r\nvar keyDown = false;\r\n\r\nclass Home extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n    // Properties for state\r\n    this.state = {\r\n      Distortion: 0.0,\r\n      ReverbRoom: 0.0,\r\n      ReverbWet: 0.0,\r\n      VibratoFreq: 500,\r\n      VibratoPitch: 0.0,\r\n      LowpassCut: 0\r\n    }\r\n\r\n    this.synthState = {\r\n      Octave: 4,\r\n      Distortion: 0.0,\r\n      ReverbRoom: 0.0,\r\n      ReverbWet: 0.0,\r\n      VibratoFreq: 500,\r\n      VibratoPitch: 0.0,\r\n      LowpassCut: 0\r\n    }\r\n\r\n    // Binds function to page\r\n    this.synthControl = this.synthControl.bind(this);\r\n    this.synthOff = this.synthOff.bind(this);\r\n    this.updateDistortion = this.updateDistortion.bind(this);\r\n    this.updateReverbRoom = this.updateReverbRoom.bind(this);\r\n    this.updateReverbWet = this.updateReverbWet.bind(this);\r\n    this.updateVibratoFreq = this.updateVibratoFreq.bind(this);\r\n    this.updateVibratoPitch = this.updateVibratoPitch.bind(this);\r\n    this.updateLowpassCut = this.updateLowpassCut.bind(this);\r\n    this.resetSynth = this.resetSynth.bind(this);\r\n }\r\n\r\n  // Adds an event listener for keystrokes on the page's load\r\n  componentDidMount(){\r\n     document.addEventListener(\"keydown\", this.synthControl, false);\r\n     document.addEventListener(\"keyup\", this.synthOff, false);\r\n     document.querySelector('button')?.addEventListener('click', async () => {\r\n    \tawait Tone.start()\r\n    \tconsole.log('audio is ready')\r\n    })\r\n   }\r\n\r\n   // Removes the event listener when the page unloads to prevent leaks\r\n   componentWillUnmount(){\r\n      document.removeEventListener(\"keydown\", this.synthControl, false);\r\n      document.removeEventListener(\"keyup\", this.synthOff, false);\r\n   }\r\n\r\n  // Controls the synth given the keystroke\r\n  synthControl(event){\r\n      const now = Tone.now();\r\n      var note = \"\";\r\n      var currOctave = 0;\r\n      var newOctave = 0;\r\n      if(event.key === \"a\" && !keyDown) {\r\n        note = \"C\" + this.synthState.Octave.toString();\r\n        synth.triggerAttack(note, now);\r\n        keyDown = true;\r\n      }\r\n      else if(event.key === \"s\" && !keyDown) {\r\n        note = \"D\" + this.synthState.Octave.toString();\r\n        synth.triggerAttack(note, now);\r\n        keyDown = true;\r\n      }\r\n      else if(event.key === \"d\" && !keyDown) {\r\n        note = \"E\" + this.synthState.Octave.toString();\r\n        synth.triggerAttack(note, now);\r\n        keyDown = true;\r\n      }\r\n      else if(event.key === \"f\" && !keyDown) {\r\n        note = \"F\" + this.synthState.Octave.toString();\r\n        synth.triggerAttack(note, now);\r\n        keyDown = true;\r\n      }\r\n      else if(event.key === \"g\" && !keyDown) {\r\n        note = \"G\" + this.synthState.Octave.toString();\r\n        synth.triggerAttack(note, now);\r\n        keyDown = true;\r\n      }\r\n      else if(event.key === \"h\" && !keyDown) {\r\n        note = \"A\" + this.synthState.Octave.toString();\r\n        synth.triggerAttack(note, now);\r\n        keyDown = true;\r\n      }\r\n      else if(event.key === \"j\" && !keyDown) {\r\n        note = \"B\" + this.synthState.Octave.toString();\r\n        synth.triggerAttack(note, now);\r\n        keyDown = true;\r\n      }\r\n      else if(event.key === \"k\" && !keyDown) {\r\n        currOctave = this.synthState.Octave;\r\n        currOctave = currOctave + 1;\r\n        note = \"C\" + currOctave.toString();\r\n        synth.triggerAttack(note, now);\r\n        keyDown = true;\r\n      }\r\n      else if(event.key === \"z\") {\r\n        // Lowers the octave of the note by 1 and resets the state to match\r\n        currOctave = this.synthState.Octave;\r\n        // Makes sure you aren't decreasing the octave to a negative\r\n        if (currOctave > 0) {\r\n          newOctave = currOctave - 1;\r\n          this.synthState.Octave = newOctave;\r\n        }\r\n      }\r\n      else if(event.key === \"x\") {\r\n        // Raises the octave of the note by 1 and resets the state to match\r\n        currOctave = this.synthState.Octave;\r\n        // Makes sure you aren't increasing octave too high (arbitrarily set at 7)\r\n        if (currOctave < 7) {\r\n          newOctave = currOctave + 1;\r\n          this.synthState.Octave = newOctave;\r\n        }\r\n      }\r\n  }\r\n\r\n  // Turns the synth off once the key is released\r\n  synthOff(event){\r\n    const now = Tone.now();\r\n    // Create a string of possible keys that can be held\r\n    var allKeys = \"asdfghjk\";\r\n    if(allKeys.includes(event.key)) {\r\n      synth.triggerRelease(now);\r\n      keyDown = false;\r\n    }\r\n  }\r\n\r\n  // Resets the synth to match the current state\r\n  resetSynth() {\r\n    // Go through all effects and set them to the proper values\r\n    // REMEMBER TO ADD TO THIS FUNCTION AS THE PROGRAM GETS MORE INTENSIVE\r\n    const distortion = new Tone.Distortion(this.synthState.Distortion).toDestination();\r\n\r\n    const reverb = new Tone.JCReverb({\r\n      roomSize: this.synthState.ReverbRoom,\r\n      wet: this.synthState.ReverbWet\r\n    }).toDestination();\r\n\r\n    const vibrato = new Tone.Vibrato({\r\n      frequency: this.synthState.VibratoFreq,\r\n      depth: this.synthState.VibratoPitch\r\n    }).toDestination();\r\n\r\n    const lowpass = new Tone.Filter(this.synthState.LowpassCut, \"lowpass\").toDestination();\r\n\r\n    // Adds a limiter because this can get quite loud\r\n    const limiter = new Tone.Volume(-100).toDestination();\r\n\r\n    synth = new Tone.Synth().chain(distortion, reverb, vibrato, lowpass, limiter).toDestination();\r\n  }\r\n\r\n  // Updates the distortion given the slider\r\n  updateDistortion(event) {\r\n    var newDistortion = event.target.value;\r\n    this.synthState.Distortion = newDistortion;\r\n    this.setState({Distortion: newDistortion});\r\n    // Make sure to call resetSynth to reset to current state values\r\n    this.resetSynth();\r\n  }\r\n\r\n  // Updates the reverb room given the slider\r\n  updateReverbRoom(event) {\r\n    var newReverbRoom = event.target.value;\r\n    this.synthState.ReverbRoom = newReverbRoom;\r\n    this.setState({ReverbRoom: newReverbRoom});\r\n    // Make sure to call resetSynth to reset to current state values\r\n    this.resetSynth();\r\n  }\r\n\r\n  // Updates the reverb wet given the slider\r\n  updateReverbWet(event) {\r\n    var newReverbWet = event.target.value;\r\n    this.synthState.ReverbWet = newReverbWet;\r\n    this.setState({ReverbWet: newReverbWet});\r\n    // Make sure to call resetSynth to reset to current state values\r\n    this.resetSynth();\r\n  }\r\n\r\n  // Updates the vibrato frequency given the slider\r\n  updateVibratoFreq(event) {\r\n    var newVibratoFreq = event.target.value;\r\n    this.synthState.VibratoFreq = newVibratoFreq;\r\n    this.setState({VibratoFreq: newVibratoFreq});\r\n    // Make sure to call resetSynth to reset to current state values\r\n    this.resetSynth();\r\n  }\r\n\r\n  // Updates the vibrato pitch given the slider\r\n  updateVibratoPitch(event) {\r\n    var newVibratoPitch = event.target.value;\r\n    this.synthState.VibratoPitch = newVibratoPitch;\r\n    this.setState({VibratoPitch: newVibratoPitch});\r\n    // Make sure to call resetSynth to reset to current state values\r\n    this.resetSynth();\r\n  }\r\n\r\n  // Updates the lowpass cutoff frequency given the slider\r\n  updateLowpassCut(event) {\r\n    var newLowpassCut = event.target.value;\r\n    this.synthState.LowpassCut = newLowpassCut;\r\n    this.setState({LowpassCut: newLowpassCut});\r\n    // Make sure to call resetSynth to reset to current state values\r\n    this.resetSynth();\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <>\r\n      <button id=\"button\">Play/Pause</button>\r\n        <Row>\r\n          <Col>\r\n            <h1>Welcome!</h1>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <p>Controls:</p>\r\n          </Col>\r\n          <Col>\r\n            <p>Use keys a, s, d, f, g, h, j, and k to play notes</p>\r\n            <p>The a key corresponds to a C note, s to D, and so on</p>\r\n            <p>Use z to decrease the octave and x to increase the octave</p>\r\n          </Col>\r\n        </Row>\r\n        <p>Distortion level</p>\r\n        <Container>\r\n          <Col>\r\n          <RangeStepInput\r\n            min={0}\r\n            max={0.5}\r\n            value={this.state.Distortion}\r\n            step={0.1}\r\n            onChange={this.updateDistortion}\r\n          />\r\n          </Col>\r\n        </Container>\r\n        <p>Reverb</p>\r\n        <Container>\r\n          <Col>\r\n            <p>Room Size</p>\r\n            <RangeStepInput\r\n              min={0}\r\n              max={0.7}\r\n              value={this.state.ReverbRoom}\r\n              step={0.1}\r\n              onChange={this.updateReverbRoom}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <p>Amount of Effected Sound</p>\r\n            <RangeStepInput\r\n              min={0}\r\n              max={0.7}\r\n              value={this.state.ReverbWet}\r\n              step={0.1}\r\n              onChange={this.updateReverbWet}\r\n            />\r\n          </Col>\r\n        </Container>\r\n        <p>Vibrato</p>\r\n        <Container>\r\n          <Col>\r\n            <p>Frequency</p>\r\n            <RangeStepInput\r\n              min={500}\r\n              max={1000}\r\n              value={this.state.VibratoFreq}\r\n              step={1}\r\n              onChange={this.updateVibratoFreq}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <p>Pitch Modulation</p>\r\n            <RangeStepInput\r\n              min={0}\r\n              max={0.3}\r\n              value={this.state.VibratoPitch}\r\n              step={0.1}\r\n              onChange={this.updateVibratoPitch}\r\n            />\r\n          </Col>\r\n        </Container>\r\n        <p>Lowpass Filter</p>\r\n        <Container>\r\n          <Col>\r\n            <p>Cutoff frequency</p>\r\n            <RangeStepInput\r\n              min={0}\r\n              max={500}\r\n              value={this.state.LowpassCut}\r\n              step={10}\r\n              onChange={this.updateLowpassCut}\r\n            />\r\n          </Col>\r\n        </Container>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from \"./Home.js\";\n\nconst Nomatch = () => (\n  <div className = \"error\">\n  <h1> ERROR: Page not found </h1>\n  </div>\n);\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={ Home } />\n          <Route component={ Nomatch } />\n        </Switch>\n      </Router>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}