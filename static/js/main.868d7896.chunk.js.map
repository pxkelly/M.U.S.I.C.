{"version":3,"sources":["Home.js","App.js","reportWebVitals.js","index.js"],"names":["synth","Tone","toDestination","distortion","reverb","vibrato","lowpass","effects","oscillator","keyDown","Home","props","state","Distortion","DistortionOn","ReverbRoom","ReverbOn","VibratoFreq","VibratoPitch","VibratoOn","LowpassCut","LowpassOn","TriangleOsc","synthState","Octave","synthControl","bind","synthOff","updateDistortion","toggleDistortion","updateReverbRoom","toggleReverb","updateVibratoFreq","updateVibratoPitch","toggleVibrato","updateLowpassCut","toggleLowpass","updateOscillator","addEffect","removeEffect","refreshSynth","document","addEventListener","this","removeEventListener","event","now","note","currOctave","newOctave","key","toString","triggerAttack","includes","triggerRelease","target","value","setState","checked","roomSize","input","frequency","depth","id","effect","push","console","log","index","indexOf","splice","forEach","connect","eval","type","className","xs","sm","min","max","step","onChange","disabled","Check","label","Component","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.868d7896.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container, Row, Col, Form } from 'react-bootstrap';\r\nimport * as Tone from 'tone';\r\nimport { RangeStepInput } from 'react-range-step-input';\r\nimport Switch from \"react-switch\";\r\nimport \"./App.css\";\r\nimport \"./Pages.css\";\r\n\r\n// Global variables defined here\r\n// synth is the synth used on the entire page\r\nvar synth = new Tone.Synth().toDestination();\r\n\r\n// There are globals for every effect on the synth for easier control\r\nvar distortion = new Tone.Distortion(0).toDestination();\r\nvar reverb = new Tone.JCReverb(0).toDestination();\r\nvar vibrato = new Tone.Vibrato(0, 0).toDestination();\r\nvar lowpass = new Tone.Filter(0, \"lowpass\").toDestination();\r\n\r\n// This keeps track of all the active effects to add to the synthOff\r\nvar effects = [];\r\n\r\n// This is the current oscillator on the synth, default is triangle wave\r\nvar oscillator = \"triangle\";\r\n\r\n// keyDown keeps track if the key is pressed or not (note is playing)\r\nvar keyDown = false;\r\n\r\nclass Home extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n    // Properties for state\r\n    this.state = {\r\n      Distortion: 0.0,\r\n      DistortionOn: false,\r\n      ReverbRoom: 0.0,\r\n      ReverbOn: false,\r\n      VibratoFreq: 0,\r\n      VibratoPitch: 0.0,\r\n      VibratoOn: false,\r\n      LowpassCut: 0,\r\n      LowpassOn: false,\r\n      TriangleOsc: true\r\n    }\r\n\r\n    this.synthState = {\r\n      Octave: 4,\r\n      DistortionOn: false,\r\n      ReverbOn: false,\r\n      VibratoOn: false,\r\n      LowpassOn: false\r\n    }\r\n\r\n    // Binds function to page\r\n    this.synthControl = this.synthControl.bind(this);\r\n    this.synthOff = this.synthOff.bind(this);\r\n    this.updateDistortion = this.updateDistortion.bind(this);\r\n    this.toggleDistortion = this.toggleDistortion.bind(this);\r\n    this.updateReverbRoom = this.updateReverbRoom.bind(this);\r\n    this.toggleReverb = this.toggleReverb.bind(this);\r\n    this.updateVibratoFreq = this.updateVibratoFreq.bind(this);\r\n    this.updateVibratoPitch = this.updateVibratoPitch.bind(this);\r\n    this.toggleVibrato = this.toggleVibrato.bind(this);\r\n    this.updateLowpassCut = this.updateLowpassCut.bind(this);\r\n    this.toggleLowpass = this.toggleLowpass.bind(this);\r\n    this.updateOscillator = this.updateOscillator.bind(this);\r\n    this.addEffect = this.addEffect.bind(this);\r\n    this.removeEffect = this.removeEffect.bind(this);\r\n    this.refreshSynth = this.refreshSynth.bind(this);\r\n }\r\n\r\n  // Adds an event listener for keystrokes on the page's load\r\n  componentDidMount(){\r\n    document.addEventListener(\"keydown\", this.synthControl, false);\r\n    document.addEventListener(\"keyup\", this.synthOff, false);\r\n   }\r\n\r\n  // Removes the event listener when the page unloads to prevent leaks\r\n  componentWillUnmount(){\r\n    document.removeEventListener(\"keydown\", this.synthControl, false);\r\n    document.removeEventListener(\"keyup\", this.synthOff, false);\r\n   }\r\n\r\n  // Controls the synth given the keystroke\r\n  synthControl(event){\r\n    const now = Tone.now();\r\n    var note = \"\";\r\n    var currOctave = 0;\r\n    var newOctave = 0;\r\n    if(event.key === \"a\" && !keyDown) {\r\n      note = \"C\" + this.synthState.Octave.toString();\r\n      synth.triggerAttack(note, now);\r\n      keyDown = true;\r\n    }\r\n    else if(event.key === \"s\" && !keyDown) {\r\n      note = \"D\" + this.synthState.Octave.toString();\r\n      synth.triggerAttack(note, now);\r\n      keyDown = true;\r\n    }\r\n    else if(event.key === \"d\" && !keyDown) {\r\n      note = \"E\" + this.synthState.Octave.toString();\r\n      synth.triggerAttack(note, now);\r\n      keyDown = true;\r\n    }\r\n    else if(event.key === \"f\" && !keyDown) {\r\n      note = \"F\" + this.synthState.Octave.toString();\r\n      synth.triggerAttack(note, now);\r\n      keyDown = true;\r\n    }\r\n    else if(event.key === \"g\" && !keyDown) {\r\n      note = \"G\" + this.synthState.Octave.toString();\r\n      synth.triggerAttack(note, now);\r\n      keyDown = true;\r\n    }\r\n    else if(event.key === \"h\" && !keyDown) {\r\n      note = \"A\" + this.synthState.Octave.toString();\r\n      synth.triggerAttack(note, now);\r\n      keyDown = true;\r\n    }\r\n    else if(event.key === \"j\" && !keyDown) {\r\n      note = \"B\" + this.synthState.Octave.toString();\r\n      synth.triggerAttack(note, now);\r\n      keyDown = true;\r\n    }\r\n    else if(event.key === \"k\" && !keyDown) {\r\n      currOctave = this.synthState.Octave;\r\n      currOctave = currOctave + 1;\r\n      note = \"C\" + currOctave.toString();\r\n      synth.triggerAttack(note, now);\r\n      keyDown = true;\r\n    }\r\n    else if(event.key === \"z\") {\r\n      // Lowers the octave of the note by 1 and resets the state to match\r\n      currOctave = this.synthState.Octave;\r\n      // Makes sure you aren't decreasing the octave to a negative\r\n      if (currOctave > 0) {\r\n        newOctave = currOctave - 1;\r\n        this.synthState.Octave = newOctave;\r\n      }\r\n    }\r\n    else if(event.key === \"x\") {\r\n      // Raises the octave of the note by 1 and resets the state to match\r\n      currOctave = this.synthState.Octave;\r\n      // Makes sure you aren't increasing octave too high (arbitrarily set at 7)\r\n      if (currOctave < 7) {\r\n        newOctave = currOctave + 1;\r\n        this.synthState.Octave = newOctave;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Turns the synth off once the key is released\r\n  synthOff(event){\r\n    const now = Tone.now();\r\n    // Create a string of possible keys that can be held\r\n    var allKeys = \"asdfghjk\";\r\n    if(allKeys.includes(event.key)) {\r\n      synth.triggerRelease(now);\r\n      keyDown = false;\r\n    }\r\n  }\r\n\r\n  // Updates the distortion given the slider\r\n  updateDistortion(event) {\r\n    distortion.distortion = event.target.value;\r\n    // Update the state (moves slider)\r\n    this.setState({Distortion: event.target.value});\r\n    // Make sure to call refreshSynth to reset to current state values\r\n    this.refreshSynth();\r\n  }\r\n\r\n  // Turns the distortion on or off\r\n  toggleDistortion(checked) {\r\n    this.synthState.DistortionOn = checked;\r\n    // This allows the slider to move on the page itself\r\n    this.setState({DistortionOn: checked});\r\n    // If the distortion is turned off, reset the distortion slider\r\n    if (!this.synthState.DistortionOn) {\r\n      // Resets the distortion on the synth to 0\r\n      distortion.distortion = 0;\r\n      // Resets the state (will reset slider)\r\n      this.setState({Distortion: 0});\r\n      // Removes distortion from the effects list\r\n      this.removeEffect(\"distortion\");\r\n      //this.refreshSynth();\r\n    }\r\n    // Otherwise, add distortion to the effects list\r\n    else {\r\n      this.addEffect(\"distortion\");\r\n    }\r\n  }\r\n\r\n  // Updates the reverb room size given the slider\r\n  updateReverbRoom(event) {\r\n    reverb.roomSize.input.value = event.target.value;\r\n    //Update state (moves slider)\r\n    this.setState({ReverbRoom: event.target.value});\r\n    // Make sure to call refreshSynth to reset to current state values\r\n    this.refreshSynth();\r\n  }\r\n\r\n  // Turns the reverb on or off\r\n  toggleReverb(checked) {\r\n    this.synthState.ReverbOn = checked;\r\n    // This allows the slider to move on the page itself\r\n    this.setState({ReverbOn: checked});\r\n    // If the reverb is turned off, reset the reverb slider\r\n    if (!this.synthState.ReverbOn) {\r\n      // Resets the reverb's room size on the synth to 0\r\n      reverb.roomSize.input.value = 0;\r\n      // Resets the state (will reset slider)\r\n      this.setState({ReverbRoom: 0});\r\n      // Removes distortion from the effects list\r\n      this.removeEffect(\"reverb\");\r\n      //this.refreshSynth();\r\n    }\r\n    // Otherwise, add distortion to the effects list\r\n    else {\r\n      this.addEffect(\"reverb\");\r\n    }\r\n  }\r\n\r\n  // Updates the vibrato frequency given the slider\r\n  updateVibratoFreq(event) {\r\n    vibrato.frequency.value = event.target.value;\r\n    // Update state (moves slier)\r\n    this.setState({VibratoFreq: event.target.value});\r\n    // Make sure to call refreshSynth to reset to current state values\r\n    this.refreshSynth();\r\n  }\r\n\r\n  // Updates the vibrato pitch given the slider\r\n  updateVibratoPitch(event) {\r\n    vibrato.depth.input.value = event.target.value;\r\n    // Update state (moves slier)\r\n    this.setState({VibratoPitch: event.target.value});\r\n    // Make sure to call refreshSynth to reset to current state values\r\n    this.refreshSynth();\r\n  }\r\n\r\n  // Turns the vibrato on or off\r\n  toggleVibrato(checked) {\r\n    this.synthState.VibratoOn = checked;\r\n    // This allows the slider to move on the page itself\r\n    this.setState({VibratoOn: checked});\r\n    // If the vibrato is turned off, reset the two vibrato sliders\r\n    if (!this.synthState.VibratoOn) {\r\n      // Resets the vibrato level on the synth to 0\r\n      vibrato.frequency.value = 0;\r\n      vibrato.depth.input.value = 0;\r\n      // Resets the state (will reset slider)\r\n      this.setState({VibratoFreq: 0});\r\n      this.setState({VibratoPitch: 0});\r\n      // Removes distortion from the effects list\r\n      this.removeEffect(\"vibrato\");\r\n      //this.refreshSynth();\r\n    }\r\n    // Otherwise, add distortion to the effects list\r\n    else {\r\n      this.addEffect(\"vibrato\");\r\n    }\r\n  }\r\n\r\n  // Updates the lowpass cutoff frequency given the slider\r\n  updateLowpassCut(event) {\r\n    lowpass.frequency.value = event.target.value;\r\n    // Update state (moves slider)\r\n    this.setState({LowpassCut: event.target.value});\r\n    // Make sure to call refreshSynth to reset to current state values\r\n    this.refreshSynth();\r\n  }\r\n\r\n  // Turns the lowpass filter on or off\r\n  toggleLowpass(checked) {\r\n    this.synthState.LowpassOn = checked;\r\n    // This allows the slider to move on the page itself\r\n    this.setState({LowpassOn: checked});\r\n    // If the lowpass filter is turned off, reset the lowpass slider\r\n    if (!this.synthState.LowpassOn) {\r\n      // Resets the lowpass cutoff on the synth to 0\r\n      lowpass.frequency.value = 0;\r\n      // Resets the state (will reset slider)\r\n      this.setState({LowpassCut: 0});\r\n      // Removes distortion from the effects list\r\n      this.removeEffect(\"lowpass\");\r\n      //this.refreshSynth();\r\n    }\r\n    // Otherwise, add distortion to the effects list\r\n    else {\r\n      this.addEffect(\"lowpass\");\r\n    }\r\n  }\r\n\r\n  // Changes the oscillator attached to the synth\r\n  updateOscillator(event) {\r\n    // Update the global variable to save these changes\r\n    oscillator = event.target.id;\r\n    // Updates the selected button on the page\r\n    if (event.target.id !== \"triangle\") {\r\n      this.setState({TriangleOsc: false});\r\n    }\r\n    else {\r\n      this.setState({TriangleOsc: true});\r\n    }\r\n    // Refresh the synth with the new oscillator\r\n    this.refreshSynth();\r\n  }\r\n\r\n  // Adds the effect to the effects list\r\n  addEffect(effect) {\r\n    effects.push(effect);\r\n    console.log(effects)\r\n  }\r\n\r\n  // Removes the effect from the effects list\r\n  removeEffect(effect) {\r\n    var index = effects.indexOf(effect);\r\n    // Splices the effect out of the list\r\n    effects.splice(index, 1);\r\n    console.log(effects)\r\n  }\r\n\r\n  // Updates the synth to match the current state\r\n  refreshSynth() {\r\n    // Resets the synth\r\n    synth = new Tone.Synth().toDestination();\r\n    // Add the effects to the synth\r\n    effects.forEach(effect => synth.connect(eval(effect)));\r\n    // Make sure the proper oscillator is used\r\n    synth.oscillator.type = oscillator;\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <>\r\n        <Container className=\"welcome-container\">\r\n          <Row className=\"section-header\">\r\n            <Col>\r\n              <h1>Welcome to M.U.S.I.C.</h1>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"section-header\">\r\n            <h5>Controls</h5>\r\n          </Row>\r\n          <Row className=\"controls\">\r\n            <p>Use keys a, s, d, f, g, h, j, and k to play notes</p>\r\n          </Row>\r\n          <Row className=\"controls\">\r\n            <p>The a key corresponds to a C note, s to D, and so on</p>\r\n          </Row>\r\n          <Row className=\"controls\">\r\n            <p>Use z to decrease the octave and x to increase the octave</p>\r\n          </Row>\r\n        </Container>\r\n\r\n        <br />\r\n\r\n        <Container className=\"effects-container\">\r\n          <Row className=\"section-header\">\r\n            <h5>Synth Effects</h5>\r\n          </Row>\r\n          <Row className=\"effects\">\r\n            <Col xs={1}>\r\n              <p>Distortion</p>\r\n              <Row className=\"slider\">\r\n                <Col xs={6}>\r\n                  <p>Level: </p>\r\n                </Col>\r\n                <Col className=\"bar\" sm={1}>\r\n                  <RangeStepInput\r\n                    min={0}\r\n                    max={10}\r\n                    value={this.state.Distortion}\r\n                    step={0.1}\r\n                    onChange={this.updateDistortion}\r\n                    disabled={!this.synthState.DistortionOn}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n            <Col xs={2}>\r\n              <Switch\r\n                onChange={this.toggleDistortion}\r\n                checked={this.state.DistortionOn}\r\n              />\r\n            </Col>\r\n            <Col xs={1}>\r\n              <p>Reverb</p>\r\n              <Row className=\"slider\">\r\n                <Col xs={6}>\r\n                  <p>Level: </p>\r\n                </Col>\r\n                <Col className=\"bar\" sm={1}>\r\n                  <RangeStepInput\r\n                    min={0}\r\n                    max={0.9}\r\n                    value={this.state.ReverbRoom}\r\n                    step={0.01}\r\n                    onChange={this.updateReverbRoom}\r\n                    disabled={!this.state.ReverbOn}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n            <Col xs={2}>\r\n              <Switch\r\n                onChange={this.toggleReverb}\r\n                checked={this.synthState.ReverbOn}\r\n              />\r\n            </Col>\r\n            <Col xs={1}>\r\n              <p>Vibrato</p>\r\n              <Row className=\"slider\">\r\n                <Col xs={6}>\r\n                  <p>Freq: </p>\r\n                </Col>\r\n                <Col className=\"bar\" sm={1}>\r\n                  <RangeStepInput\r\n                    min={0}\r\n                    max={10}\r\n                    value={this.state.VibratoFreq}\r\n                    step={0.1}\r\n                    onChange={this.updateVibratoFreq}\r\n                    disabled={!this.state.VibratoOn}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"slider\">\r\n                <Col xs={6}>\r\n                  <p>Pitch: </p>\r\n                </Col>\r\n                <Col className=\"bar\" sm={1}>\r\n                  <RangeStepInput\r\n                    min={0}\r\n                    max={1}\r\n                    value={this.state.VibratoPitch}\r\n                    step={0.1}\r\n                    onChange={this.updateVibratoPitch}\r\n                    disabled={!this.state.VibratoOn}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n            <Col xs={2}>\r\n              <Switch\r\n                onChange={this.toggleVibrato}\r\n                checked={this.state.VibratoOn}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <br />\r\n\r\n        <Container className=\"oscillator-container\">\r\n          <Row className=\"section-header\">\r\n            <h5>Oscillator Type</h5>\r\n          </Row>\r\n          <Row className=\"oscillators\">\r\n            <Col xs={1}>\r\n              <Form.Check\r\n                type=\"radio\"\r\n                label=\"Sine\"\r\n                id=\"sine\"\r\n                onChange={this.updateOscillator}\r\n              />\r\n            </Col>\r\n            <Col xs={1}>\r\n              <Form.Check\r\n                type=\"radio\"\r\n                label=\"Square\"\r\n                id=\"square\"\r\n                onChange={this.updateOscillator}\r\n              />\r\n            </Col>\r\n            <Col xs={1}>\r\n              <Form.Check\r\n                type=\"radio\"\r\n                label=\"Triangle\"\r\n                id=\"triangle\"\r\n                onChange={this.updateOscillator}\r\n                checked={this.state.TriangleOsc}\r\n              />\r\n            </Col>\r\n            <Col xs={1}>\r\n              <Form.Check\r\n                type=\"radio\"\r\n                label=\"Sawtooth\"\r\n                id=\"sawtooth\"\r\n                onChange={this.updateOscillator}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport { HashRouter, BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Home from \"./Home.js\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <Route exact path=\"/\" component={ Home } />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}