{"version":3,"sources":["SynthPage.js","HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["synth","Tone","toDestination","distortion","reverb","vibrato","pitch","pan","lowpass","highpass","effects","attack","decay","sustain","release","envelope","oscillator","keyDown","SynthPage","props","state","Distortion","DistortionOn","ReverbRoom","ReverbOn","VibratoFreq","VibratoPitch","VibratoOn","Pitch","PitchOn","Pan","PanOn","LowpassCut","LowpassOn","HighpassCut","HighpassOn","TriangleOsc","Attack","Decay","Sustain","Release","synthState","Octave","synthControl","bind","synthOff","updateDistortion","toggleDistortion","updateReverbRoom","toggleReverb","updateVibratoFreq","updateVibratoPitch","toggleVibrato","updatePitch","togglePitch","updatePan","togglePan","updateLowpassCut","toggleLowpass","updateHighpassCut","toggleHighpass","updateAttack","updateDecay","updateSustain","updateRelease","updateOscillator","addEffect","removeEffect","refreshSynth","document","addEventListener","this","a","removeEventListener","event","now","note","currOctave","newOctave","key","toString","triggerAttack","includes","triggerRelease","value","setState","target","checked","roomSize","input","frequency","depth","effect","push","index","indexOf","splice","forEach","connect","eval","type","className","xs","sm","orientation","min","max","step","onChange","disabled","valueLabelDisplay","color","component","aria-label","name","row","control","label","Component","HomePage","handleClick","Container","Row","href","Button","variant","onClick","NoMatch","App","basename","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uhGAcIA,OAAQ,IAAIC,sCAAeC,gBAG3BC,WAAa,IAAIF,qCAAgB,GAAGC,gBACpCE,OAAS,IAAIH,qCAAc,GAAGC,gBAC9BG,QAAU,IAAIJ,qCAAa,EAAG,GAAGC,gBACjCI,MAAQ,IAAIL,qCAAgB,GAAGC,gBAC/BK,IAAM,IAAIN,qCAAY,GAAGC,gBAGzBM,QAAU,IAAIP,qCAAY,EAAG,WAAWC,gBACxCO,SAAW,IAAIR,qCAAY,IAAO,YAAYC,gBAG9CQ,QAAU,GAGVC,OAAS,EACTC,MAAQ,EACRC,QAAU,EACVC,QAAU,EAEdd,MAAMe,SAASJ,OAASA,OACxBX,MAAMe,SAASH,MAAQA,MACvBZ,MAAMe,SAASF,QAAUA,QACzBb,MAAMe,SAASD,QAAUA,QAGzB,IAAIE,WAAa,WAGbC,SAAU,EAERC,U,kXACJ,mBAAYC,GAAQ,IAAD,uLACjB,mBAAMA,IAEDC,MAAQ,CACXC,WAAY,EACZC,cAAc,EACdC,WAAY,EACZC,UAAU,EACVC,YAAa,EACbC,aAAc,EACdC,WAAW,EACXC,MAAO,EACPC,SAAS,EACTC,IAAK,EACLC,OAAO,EACPC,WAAY,EACZC,WAAW,EACXC,YAAa,IACbC,YAAY,EACZC,aAAa,EACbC,OAAQ,EACRC,MAAO,EACPC,QAAS,EACTC,QAAS,GAGX,EAAKC,WAAa,CAChBC,OAAQ,EACRpB,cAAc,EACdE,UAAU,EACVG,WAAW,EACXE,SAAS,EACTE,OAAO,EACPE,WAAW,EACXE,YAAY,GAId,EAAKQ,aAAe,EAAKA,aAAaC,KAAlB,wKACpB,EAAKC,SAAW,EAAKA,SAASD,KAAd,wKAChB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,wKACxB,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,wKACxB,EAAKI,iBAAmB,EAAKA,iBAAiBJ,KAAtB,wKACxB,EAAKK,aAAe,EAAKA,aAAaL,KAAlB,wKACpB,EAAKM,kBAAoB,EAAKA,kBAAkBN,KAAvB,wKACzB,EAAKO,mBAAqB,EAAKA,mBAAmBP,KAAxB,wKAC1B,EAAKQ,cAAgB,EAAKA,cAAcR,KAAnB,wKACrB,EAAKS,YAAc,EAAKA,YAAYT,KAAjB,wKACnB,EAAKU,YAAc,EAAKA,YAAYV,KAAjB,wKACnB,EAAKW,UAAY,EAAKA,UAAUX,KAAf,wKACjB,EAAKY,UAAY,EAAKA,UAAUZ,KAAf,wKACjB,EAAKa,iBAAmB,EAAKA,iBAAiBb,KAAtB,wKACxB,EAAKc,cAAgB,EAAKA,cAAcd,KAAnB,wKACrB,EAAKe,kBAAoB,EAAKA,kBAAkBf,KAAvB,wKACzB,EAAKgB,eAAiB,EAAKA,eAAehB,KAApB,wKACtB,EAAKiB,aAAe,EAAKA,aAAajB,KAAlB,wKACpB,EAAKkB,YAAc,EAAKA,YAAYlB,KAAjB,wKACnB,EAAKmB,cAAgB,EAAKA,cAAcnB,KAAnB,wKACrB,EAAKoB,cAAgB,EAAKA,cAAcpB,KAAnB,wKACrB,EAAKqB,iBAAmB,EAAKA,iBAAiBrB,KAAtB,wKACxB,EAAKsB,UAAY,EAAKA,UAAUtB,KAAf,wKACjB,EAAKuB,aAAe,EAAKA,aAAavB,KAAlB,wKACpB,EAAKwB,aAAe,EAAKA,aAAaxB,KAAlB,wKA9DH,E,2MAkEnB,WACEyB,SAASC,iBAAiB,UAAWC,KAAK5B,cAAc,EAAxD,mTAA+D,gKAAA6B,EAAA,sEAEvDvE,uCAFuD,4CAI/DoE,SAASC,iBAAiB,QAASC,KAAK1B,UAAU,K,kCAIpD,WACEwB,SAASI,oBAAoB,UAAWF,KAAK5B,cAAc,GAC3D0B,SAASI,oBAAoB,QAASF,KAAK1B,UAAU,K,0BAIvD,SAAa6B,GACX,IAAMC,EAAM1E,uCACR2E,EAAO,GACPC,EAAa,EACbC,EAAY,EACC,MAAdJ,EAAMK,KAAgB9D,QAKH,MAAdyD,EAAMK,KAAgB9D,QAKR,MAAdyD,EAAMK,KAAgB9D,QAKR,MAAdyD,EAAMK,KAAgB9D,QAKR,MAAdyD,EAAMK,KAAgB9D,QAKR,MAAdyD,EAAMK,KAAgB9D,QAKR,MAAdyD,EAAMK,KAAgB9D,QAKR,MAAdyD,EAAMK,KAAgB9D,QAOR,MAAdyD,EAAMK,KAEZF,EAAaN,KAAK9B,WAAWC,QAEZ,IACfoC,EAAYD,EAAa,EACzBN,KAAK9B,WAAWC,OAASoC,GAGP,MAAdJ,EAAMK,MAEZF,EAAaN,KAAK9B,WAAWC,QAEZ,IACfoC,EAAYD,EAAa,EACzBN,KAAK9B,WAAWC,OAASoC,IArB3BD,EAAaN,KAAK9B,WAAWC,OAE7BkC,EAAO,KADPC,GAA0B,GACFG,WACxBhF,MAAMiF,cAAcL,EAAMD,GAC1B1D,SAAU,IATV2D,EAAO,IAAML,KAAK9B,WAAWC,OAAOsC,WACpChF,MAAMiF,cAAcL,EAAMD,GAC1B1D,SAAU,IAPV2D,EAAO,IAAML,KAAK9B,WAAWC,OAAOsC,WACpChF,MAAMiF,cAAcL,EAAMD,GAC1B1D,SAAU,IAPV2D,EAAO,IAAML,KAAK9B,WAAWC,OAAOsC,WACpChF,MAAMiF,cAAcL,EAAMD,GAC1B1D,SAAU,IAPV2D,EAAO,IAAML,KAAK9B,WAAWC,OAAOsC,WACpChF,MAAMiF,cAAcL,EAAMD,GAC1B1D,SAAU,IAPV2D,EAAO,IAAML,KAAK9B,WAAWC,OAAOsC,WACpChF,MAAMiF,cAAcL,EAAMD,GAC1B1D,SAAU,IAPV2D,EAAO,IAAML,KAAK9B,WAAWC,OAAOsC,WACpChF,MAAMiF,cAAcL,EAAMD,GAC1B1D,SAAU,IAPV2D,EAAO,IAAML,KAAK9B,WAAWC,OAAOsC,WACpChF,MAAMiF,cAAcL,EAAMD,GAC1B1D,SAAU,K,sBA4Dd,SAASyD,GACP,IAAMC,EAAM1E,uCAEE,WACHiF,SAASR,EAAMK,OACxB/E,MAAMmF,eAAeR,GACrB1D,SAAU,K,8BAKd,SAAiByD,EAAOU,GACtBjF,WAAWA,WAAaiF,EAExBb,KAAKc,SAAS,CAAChE,WAAY+D,IAE3Bb,KAAKH,iB,8BAIP,SAAiBM,GACfH,KAAK9B,WAAWnB,aAAeoD,EAAMY,OAAOC,QAE5ChB,KAAKc,SAAS,CAAC/D,aAAcoD,EAAMY,OAAOC,UAErChB,KAAK9B,WAAWnB,aAUnBiD,KAAKL,UAAU,eARf/D,WAAWA,WAAa,EAExBoE,KAAKc,SAAS,CAAChE,WAAY,IAE3BkD,KAAKJ,aAAa,iB,8BAStB,SAAiBO,EAAOU,GACtBhF,OAAOoF,SAASC,MAAML,MAAQA,EAE9Bb,KAAKc,SAAS,CAAC9D,WAAY6D,IAE3Bb,KAAKH,iB,0BAIP,SAAaM,GACXH,KAAK9B,WAAWjB,SAAWkD,EAAMY,OAAOC,QAExChB,KAAKc,SAAS,CAAC7D,SAAUkD,EAAMY,OAAOC,UAEjChB,KAAK9B,WAAWjB,SAUnB+C,KAAKL,UAAU,WARf9D,OAAOoF,SAASC,MAAML,MAAQ,EAE9Bb,KAAKc,SAAS,CAAC9D,WAAY,IAE3BgD,KAAKJ,aAAa,a,+BAStB,SAAkBO,EAAOU,GACvB/E,QAAQqF,UAAUN,MAAQA,EAE1Bb,KAAKc,SAAS,CAAC5D,YAAa2D,IAE5Bb,KAAKH,iB,gCAIP,SAAmBM,EAAOU,GACxB/E,QAAQsF,MAAMF,MAAML,MAAQA,EAE5Bb,KAAKc,SAAS,CAAC3D,aAAc0D,IAE7Bb,KAAKH,iB,2BAIP,SAAcM,GACZH,KAAK9B,WAAWd,UAAY+C,EAAMY,OAAOC,QAEzChB,KAAKc,SAAS,CAAC1D,UAAW+C,EAAMY,OAAOC,UAElChB,KAAK9B,WAAWd,UAYnB4C,KAAKL,UAAU,YAVf7D,QAAQqF,UAAUN,MAAQ,EAC1B/E,QAAQsF,MAAMF,MAAML,MAAQ,EAE5Bb,KAAKc,SAAS,CAAC5D,YAAa,IAC5B8C,KAAKc,SAAS,CAAC3D,aAAc,IAE7B6C,KAAKJ,aAAa,c,yBAStB,SAAYO,EAAOU,GACjB9E,MAAMA,MAAQ8E,EAEdb,KAAKc,SAAS,CAACzD,MAAOwD,IAEtBb,KAAKH,iB,yBAIP,SAAYM,GACVH,KAAK9B,WAAWZ,QAAU6C,EAAMY,OAAOC,QAEvChB,KAAKc,SAAS,CAACxD,QAAS6C,EAAMY,OAAOC,UAEhChB,KAAK9B,WAAWZ,QAUnB0C,KAAKL,UAAU,UARf5D,MAAMA,MAAQ,EAEdiE,KAAKc,SAAS,CAACzD,MAAO,IAEtB2C,KAAKJ,aAAa,Y,uBAStB,SAAUO,EAAOU,GACf7E,IAAIA,IAAIkF,MAAML,MAAQA,EAEtBb,KAAKc,SAAS,CAACvD,IAAKsD,IAEpBb,KAAKH,iB,uBAIP,SAAUM,GACRH,KAAK9B,WAAWV,MAAQ2C,EAAMY,OAAOC,QAErChB,KAAKc,SAAS,CAACtD,MAAO2C,EAAMY,OAAOC,UAE9BhB,KAAK9B,WAAWV,MAUnBwC,KAAKL,UAAU,QARf3D,IAAIA,IAAIkF,MAAML,MAAQ,EAEtBb,KAAKc,SAAS,CAACvD,IAAK,IAEpByC,KAAKJ,aAAa,U,8BAStB,SAAiBO,EAAOU,GACtB5E,QAAQkF,UAAUN,MAAQA,EAE1Bb,KAAKc,SAAS,CAACrD,WAAYoD,IAE3Bb,KAAKH,iB,2BAIP,SAAcM,GACZH,KAAK9B,WAAWR,UAAYyC,EAAMY,OAAOC,QAEzChB,KAAKc,SAAS,CAACpD,UAAWyC,EAAMY,OAAOC,UAElChB,KAAK9B,WAAWR,UAUnBsC,KAAKL,UAAU,YARf1D,QAAQkF,UAAUN,MAAQ,EAE1Bb,KAAKc,SAAS,CAACrD,WAAY,IAE3BuC,KAAKJ,aAAa,c,+BAStB,SAAkBO,EAAOU,GACvB3E,SAASiF,UAAUN,MAAQA,EAE3Bb,KAAKc,SAAS,CAACnD,YAAakD,IAE5Bb,KAAKH,iB,4BAIP,SAAeM,GACbH,KAAK9B,WAAWN,WAAauC,EAAMY,OAAOC,QAE1ChB,KAAKc,SAAS,CAAClD,WAAYuC,EAAMY,OAAOC,UAEnChB,KAAK9B,WAAWN,WAUnBoC,KAAKL,UAAU,aARfzD,SAASiF,UAAUN,MAAQ,IAE3Bb,KAAKc,SAAS,CAACnD,YAAa,MAE5BqC,KAAKJ,aAAa,e,0BAStB,SAAaO,EAAOU,GAClBzE,OAASyE,EAETb,KAAKc,SAAS,CAAChD,OAAQ+C,IAEvBb,KAAKH,iB,yBAIP,SAAYM,EAAOU,GACjBxE,MAAQwE,EAERb,KAAKc,SAAS,CAAC/C,MAAO8C,IAEtBb,KAAKH,iB,2BAIP,SAAcM,EAAOU,GACnBvE,QAAUuE,EAEVb,KAAKc,SAAS,CAAC9C,QAAS6C,IAExBb,KAAKH,iB,2BAIP,SAAcM,EAAOU,GACnBtE,QAAUsE,EAEVb,KAAKc,SAAS,CAAC7C,QAAS4C,IAExBb,KAAKH,iB,8BAIP,SAAiBM,GAEf1D,WAAa0D,EAAMY,OAAOF,MAEC,aAAvBV,EAAMY,OAAOF,MACfb,KAAKc,SAAS,CAACjD,aAAa,IAG5BmC,KAAKc,SAAS,CAACjD,aAAa,IAG9BmC,KAAKH,iB,uBAIP,SAAUwB,GACRlF,QAAQmF,KAAKD,K,0BAIf,SAAaA,GACX,IAAIE,EAAQpF,QAAQqF,QAAQH,GAE5BlF,QAAQsF,OAAOF,EAAO,K,0BAIxB,SAAA1B,eAEEpE,OAAQ,IAAIC,sCAAeC,gBAE3BQ,QAAQuF,SAAQ,SAAAL,QAAM,OAAI5F,MAAMkG,QAAQC,KAAKP,YAE7C5F,MAAMgB,WAAWoF,KAAOpF,WAExBhB,MAAMe,SAASJ,OAASA,OACxBX,MAAMe,SAASH,MAAQA,MACvBZ,MAAMe,SAASF,QAAUA,QACzBb,MAAMe,SAASD,QAAUA,U,oBAG3B,WACE,OACE,iIACE,6DAAC,+CAAD,CAAWuF,UAAU,qBAArB,UACE,4DAAC,+CAAD,CAAKA,UAAU,iBAAf,SACE,0FAEF,4DAAC,+CAAD,CAAKA,UAAU,WAAf,SACE,kIAEF,4DAAC,+CAAD,CAAKA,UAAU,WAAf,SACE,qIAEF,4DAAC,+CAAD,CAAKA,UAAU,WAAf,SACE,6IAIJ,qEAEA,6DAAC,+CAAD,CAAWA,UAAU,oBAArB,UACE,4DAAC,+CAAD,CAAKA,UAAU,iBAAf,SACE,+FAEF,6DAAC,+CAAD,CAAKA,UAAU,UAAf,UACE,6DAAC,gDAAD,CAAKC,GAAI,EAAT,UACE,yFACA,6DAAC,+CAAD,CAAKD,UAAU,SAAf,UACE,4DAAC,gDAAD,CAAKC,GAAI,EAAT,SACE,wFAEF,4DAAC,gDAAD,CAAKD,UAAU,MAAME,GAAI,EAAzB,SACE,4DAAC,yDAAD,CACEC,YAAY,WACZC,IAAK,EACLC,IAAK,GACLtB,MAAOb,KAAKnD,MAAMC,WAClBsF,KAAM,GACNC,SAAUrC,KAAKzB,iBACf+D,UAAWtC,KAAK9B,WAAWnB,aAC3BwF,kBAAkB,iBAK1B,4DAAC,gDAAD,CAAKT,UAAU,SAASC,GAAI,EAA5B,SACE,4DAAC,yDAAD,CACEM,SAAUrC,KAAKxB,iBACfwC,QAAShB,KAAKnD,MAAME,aACpByF,MAAM,cAGV,6DAAC,gDAAD,CAAKT,GAAI,EAAT,UACE,qFACA,6DAAC,+CAAD,CAAKD,UAAU,SAAf,UACE,4DAAC,gDAAD,CAAKC,GAAI,EAAT,SACE,wFAEF,4DAAC,gDAAD,CAAKD,UAAU,MAAME,GAAI,EAAzB,SACE,4DAAC,yDAAD,CACEC,YAAY,WACZC,IAAK,EACLC,IAAK,GACLtB,MAAOb,KAAKnD,MAAMG,WAClBoF,KAAM,GACNC,SAAUrC,KAAKvB,iBACf6D,UAAWtC,KAAKnD,MAAMI,SACtBsF,kBAAkB,iBAK1B,4DAAC,gDAAD,CAAKT,UAAU,SAASC,GAAI,EAA5B,SACE,4DAAC,yDAAD,CACEM,SAAUrC,KAAKtB,aACfsC,QAAShB,KAAK9B,WAAWjB,SACzBuF,MAAM,cAGV,6DAAC,gDAAD,CAAKT,GAAI,EAAT,UACE,sFACA,6DAAC,+CAAD,CAAKD,UAAU,SAAf,UACE,4DAAC,gDAAD,CAAKC,GAAI,EAAT,SACE,wFAEF,4DAAC,gDAAD,CAAKD,UAAU,MAAME,GAAI,EAAzB,SACE,4DAAC,yDAAD,CACEC,YAAY,WACZC,IAAK,EACLC,IAAK,GACLtB,MAAOb,KAAKnD,MAAMK,YAClBkF,KAAM,GACNC,SAAUrC,KAAKrB,kBACf2D,UAAWtC,KAAKnD,MAAMO,UACtBmF,kBAAkB,WAGtB,4DAAC,gDAAD,CAAKR,GAAI,EAAT,SACE,wFAEF,4DAAC,gDAAD,CAAKD,UAAU,MAAME,GAAI,EAAzB,SACE,4DAAC,yDAAD,CACEC,YAAY,WACZC,IAAK,EACLC,IAAK,EACLtB,MAAOb,KAAKnD,MAAMM,aAClBiF,KAAM,GACNC,SAAUrC,KAAKpB,mBACf0D,UAAWtC,KAAKnD,MAAMO,UACtBmF,kBAAkB,iBAK1B,4DAAC,gDAAD,CAAKT,UAAU,SAASC,GAAI,EAA5B,SACE,4DAAC,yDAAD,CACEM,SAAUrC,KAAKnB,cACfmC,QAAShB,KAAKnD,MAAMO,UACpBoF,MAAM,iBAIZ,qEACA,6DAAC,+CAAD,CAAKV,UAAU,UAAf,UACE,6DAAC,gDAAD,CAAKC,GAAI,EAAT,UACE,qFACA,6DAAC,+CAAD,CAAKD,UAAU,SAAf,UACE,4DAAC,gDAAD,CAAKC,GAAI,EAAT,SACE,wFAEF,4DAAC,gDAAD,CAAKD,UAAU,MAAME,GAAI,EAAzB,SACE,4DAAC,yDAAD,CACEC,YAAY,WACZC,KAAM,GACNC,IAAK,GACLtB,MAAOb,KAAKnD,MAAMQ,MAClB+E,KAAM,EACNC,SAAUrC,KAAKlB,YACfwD,UAAWtC,KAAK9B,WAAWZ,QAC3BiF,kBAAkB,iBAK1B,4DAAC,gDAAD,CAAKT,UAAU,SAASC,GAAI,EAA5B,SACE,4DAAC,yDAAD,CACEM,SAAUrC,KAAKjB,YACfiC,QAAShB,KAAKnD,MAAMS,QACpBkF,MAAM,cAGV,6DAAC,gDAAD,CAAKT,GAAI,EAAT,UACE,kFACA,6DAAC,+CAAD,CAAKD,UAAU,SAAf,UACE,4DAAC,gDAAD,CAAKC,GAAI,EAAT,SACE,wFAEF,4DAAC,gDAAD,CAAKD,UAAU,MAAME,GAAI,EAAzB,SACE,4DAAC,yDAAD,CACEC,YAAY,WACZC,KAAM,EACNC,IAAK,EACLtB,MAAOb,KAAKnD,MAAMU,IAClB6E,KAAM,GACNC,SAAUrC,KAAKhB,UACfsD,UAAWtC,KAAKnD,MAAMW,MACtB+E,kBAAkB,iBAK1B,4DAAC,gDAAD,CAAKT,UAAU,SAASC,GAAI,EAA5B,SACE,4DAAC,yDAAD,CACEM,SAAUrC,KAAKf,UACf+B,QAAShB,KAAK9B,WAAWV,MACzBgF,MAAM,oBAMd,qEACA,qEAEA,6DAAC,+CAAD,CAAWV,UAAU,mBAArB,UACE,4DAAC,+CAAD,CAAKA,UAAU,iBAAf,SACE,gGAEF,6DAAC,+CAAD,CAAKA,UAAU,UAAf,UACE,6DAAC,gDAAD,CAAKC,GAAI,EAAT,UACE,sFACA,6DAAC,+CAAD,CAAKD,UAAU,SAAf,UACE,4DAAC,gDAAD,CAAKC,GAAI,EAAT,SACE,uFAEF,4DAAC,gDAAD,CAAKD,UAAU,MAAME,GAAI,EAAzB,SACE,4DAAC,yDAAD,CACEC,YAAY,WACZC,IAAK,EACLC,IAAK,IACLtB,MAAOb,KAAKnD,MAAMY,WAClB2E,KAAM,GACNC,SAAUrC,KAAKd,iBACfoD,UAAWtC,KAAK9B,WAAWR,UAC3B6E,kBAAkB,iBAK1B,4DAAC,gDAAD,CAAKT,UAAU,SAASC,GAAI,EAA5B,SACE,4DAAC,yDAAD,CACEM,SAAUrC,KAAKb,cACf6B,QAAShB,KAAKnD,MAAMa,UACpB8E,MAAM,cAGV,6DAAC,gDAAD,CAAKT,GAAI,EAAT,UACE,uFACA,6DAAC,+CAAD,CAAKD,UAAU,SAAf,UACE,4DAAC,gDAAD,CAAKC,GAAI,EAAT,SACE,uFAEF,4DAAC,gDAAD,CAAKD,UAAU,MAAME,GAAI,EAAzB,SACE,4DAAC,yDAAD,CACEC,YAAY,WACZC,IAAK,IACLC,IAAK,IACLtB,MAAOb,KAAKnD,MAAMc,YAClByE,KAAM,GACNC,SAAUrC,KAAKZ,kBACfkD,UAAWtC,KAAKnD,MAAMe,WACtB2E,kBAAkB,iBAK1B,4DAAC,gDAAD,CAAKT,UAAU,SAASC,GAAI,EAA5B,SACE,4DAAC,yDAAD,CACEM,SAAUrC,KAAKX,eACf2B,QAAShB,KAAK9B,WAAWN,WACzB4E,MAAM,oBAMd,qEACA,qEAEA,6DAAC,+CAAD,CAAWV,UAAU,qBAArB,UACE,4DAAC,+CAAD,CAAKA,UAAU,iBAAf,SACE,kGAEF,6DAAC,+CAAD,CAAKA,UAAU,oBAAf,UACE,4DAAC,gDAAD,CAAKC,GAAI,EAAT,SACE,yFAEF,4DAAC,gDAAD,CAAKD,UAAU,MAAME,GAAI,EAAzB,SACE,4DAAC,yDAAD,CACEC,YAAY,WACZC,IAAK,EACLC,IAAK,EACLtB,MAAOb,KAAKnD,MAAMiB,OAClBsE,KAAM,GACNC,SAAUrC,KAAKV,aACfiD,kBAAkB,WAGtB,4DAAC,gDAAD,CAAKR,GAAI,EAAT,SACE,wFAEF,4DAAC,gDAAD,CAAKD,UAAU,MAAME,GAAI,EAAzB,SACE,4DAAC,yDAAD,CACEC,YAAY,WACZC,IAAK,EACLC,IAAK,EACLtB,MAAOb,KAAKnD,MAAMkB,MAClBqE,KAAM,GACNC,SAAUrC,KAAKT,YACfgD,kBAAkB,WAGtB,4DAAC,gDAAD,CAAKR,GAAI,EAAT,SACE,0FAEF,4DAAC,gDAAD,CAAKD,UAAU,MAAME,GAAI,EAAzB,SACE,4DAAC,yDAAD,CACEC,YAAY,WACZC,IAAK,EACLC,IAAK,EACLtB,MAAOb,KAAKnD,MAAMmB,QAClBoE,KAAM,GACNC,SAAUrC,KAAKR,cACf+C,kBAAkB,WAGtB,4DAAC,gDAAD,CAAKR,GAAI,EAAT,SACE,0FAEF,4DAAC,gDAAD,CAAKD,UAAU,MAAME,GAAI,EAAzB,SACE,4DAAC,yDAAD,CACEC,YAAY,WACZC,IAAK,EACLC,IAAK,EACLtB,MAAOb,KAAKnD,MAAMoB,QAClBmE,KAAM,GACNC,SAAUrC,KAAKP,cACf8C,kBAAkB,iBAM1B,qEACA,qEAEA,6DAAC,+CAAD,CAAWT,UAAU,uBAArB,UACE,4DAAC,+CAAD,CAAKA,UAAU,iBAAf,SACE,iGAEF,4DAAC,+CAAD,CAAKA,UAAU,cAAf,SACE,4DAAC,8DAAD,CAAaW,UAAU,WAAvB,SACE,6DAAC,6DAAD,CACEC,aAAW,cACXC,KAAK,aACL9B,MAAOpE,WACP4F,SAAUrC,KAAKN,iBACfkD,KAAG,EALL,UAOE,4DAAC,mEAAD,CACE/B,MAAM,WACNgC,QAAS,4DAAC,wDAAD,IACTC,MAAM,aAER,4DAAC,mEAAD,CACEjC,MAAM,OACNgC,QAAS,4DAAC,wDAAD,IACTC,MAAM,SAER,4DAAC,mEAAD,CACEjC,MAAM,SACNgC,QAAS,4DAAC,wDAAD,IACTC,MAAM,WAER,4DAAC,mEAAD,CACEjC,MAAM,WACNgC,QAAS,4DAAC,wDAAD,IACTC,MAAM,8B,WA/xBAC,8CA0yBTpG,iC,yOC7xBAqG,E,kDAtDb,WAAYpG,GAAQ,IAAD,8BACjB,cAAMA,IAGDqG,YAAc,EAAKA,YAAY5E,KAAjB,gBAJF,E,+CAQnB,WACE3C,Q,oBAGF,WACE,OACE,mCACE,eAACwH,EAAA,EAAD,CAAWpB,UAAU,oBAArB,UACE,cAACqB,EAAA,EAAD,CAAKrB,UAAU,iBAAf,SACE,yDAEF,cAACqB,EAAA,EAAD,CAAKrB,UAAU,UAAf,SACE,qGAEF,cAACqB,EAAA,EAAD,CAAKrB,UAAU,UAAf,SACE,yIAEF,cAACqB,EAAA,EAAD,CAAKrB,UAAU,UAAf,SACE,gJAEF,cAACqB,EAAA,EAAD,CAAKrB,UAAU,UAAf,SACE,mGAEF,cAACqB,EAAA,EAAD,CAAKrB,UAAU,UAAf,SACE,uJAEF,cAACqB,EAAA,EAAD,CAAKrB,UAAU,UAAf,SACE,mBAAGsB,KAAK,mCAAR,oEAEF,uBACA,uBACA,cAACD,EAAA,EAAD,CAAKrB,UAAU,UAAf,SACE,+EAEF,cAACqB,EAAA,EAAD,CAAKrB,UAAU,UAAf,SACE,cAACuB,EAAA,EAAD,CAAQC,QAAQ,YAAYd,MAAM,UAAUY,KAAK,SAASG,QAASvD,KAAKiD,YAAxE,0C,GA5CWF,aCEjBS,G,MAAU,kBACd,qBAAK1B,UAAY,QAAjB,SACA,6DAgBa2B,MAZf,WACE,OACE,cAAC,IAAD,CAAYC,SAAS,IAArB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAInB,UAAYO,IAClC,cAAC,IAAD,CAAOY,KAAK,SAASnB,UAAY9F,MACjC,cAAC,IAAD,CAAO8F,UAAYe,UCPZK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1E,SAAS2E,eAAe,SAM1BZ,M","file":"static/js/main.d62da5ec.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport * as Tone from 'tone';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport './App.css';\r\nimport './Pages.css';\r\n\r\n// Global variables defined here\r\n// synth is the synth used on the entire page\r\nvar synth = new Tone.AMSynth().toDestination();\r\n\r\n// There are globals for every effect on the synth for easier control\r\nvar distortion = new Tone.Distortion(0).toDestination();\r\nvar reverb = new Tone.JCReverb(0).toDestination();\r\nvar vibrato = new Tone.Vibrato(0, 0).toDestination();\r\nvar pitch = new Tone.PitchShift(0).toDestination();\r\nvar pan = new Tone.Panner(0).toDestination();\r\n\r\n// These are the two filters you can apply to the synth\r\nvar lowpass = new Tone.Filter(0, \"lowpass\").toDestination();\r\nvar highpass = new Tone.Filter(20000, \"highpass\").toDestination();\r\n\r\n// This keeps track of all the active effects to add to the synthOff\r\nvar effects = [];\r\n\r\n// Creates an envelope to attach to the synth at the default values\r\nvar attack = 0;\r\nvar decay = 0;\r\nvar sustain = 1;\r\nvar release = 0;\r\n// Attaches the envelope to the synth\r\nsynth.envelope.attack = attack;\r\nsynth.envelope.decay = decay;\r\nsynth.envelope.sustain = sustain;\r\nsynth.envelope.release = release;\r\n\r\n// This is the current oscillator on the synth, default is triangle wave\r\nvar oscillator = \"triangle\";\r\n\r\n// keyDown keeps track if the key is pressed or not (note is playing)\r\nvar keyDown = false;\r\n\r\nclass SynthPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Properties for state\r\n    this.state = {\r\n      Distortion: 0.0,\r\n      DistortionOn: false,\r\n      ReverbRoom: 0.0,\r\n      ReverbOn: false,\r\n      VibratoFreq: 0,\r\n      VibratoPitch: 0.0,\r\n      VibratoOn: false,\r\n      Pitch: 0,\r\n      PitchOn: false,\r\n      Pan: 0,\r\n      PanOn: false,\r\n      LowpassCut: 0,\r\n      LowpassOn: false,\r\n      HighpassCut: 20000,\r\n      HighpassOn: false,\r\n      TriangleOsc: true,\r\n      Attack: 0,\r\n      Decay: 0,\r\n      Sustain: 1,\r\n      Release: 0\r\n    }\r\n\r\n    this.synthState = {\r\n      Octave: 4,\r\n      DistortionOn: false,\r\n      ReverbOn: false,\r\n      VibratoOn: false,\r\n      PitchOn: false,\r\n      PanOn: false,\r\n      LowpassOn: false,\r\n      HighpassOn: false\r\n    }\r\n\r\n    // Binds function to page\r\n    this.synthControl = this.synthControl.bind(this);\r\n    this.synthOff = this.synthOff.bind(this);\r\n    this.updateDistortion = this.updateDistortion.bind(this);\r\n    this.toggleDistortion = this.toggleDistortion.bind(this);\r\n    this.updateReverbRoom = this.updateReverbRoom.bind(this);\r\n    this.toggleReverb = this.toggleReverb.bind(this);\r\n    this.updateVibratoFreq = this.updateVibratoFreq.bind(this);\r\n    this.updateVibratoPitch = this.updateVibratoPitch.bind(this);\r\n    this.toggleVibrato = this.toggleVibrato.bind(this);\r\n    this.updatePitch = this.updatePitch.bind(this);\r\n    this.togglePitch = this.togglePitch.bind(this);\r\n    this.updatePan = this.updatePan.bind(this);\r\n    this.togglePan = this.togglePan.bind(this);\r\n    this.updateLowpassCut = this.updateLowpassCut.bind(this);\r\n    this.toggleLowpass = this.toggleLowpass.bind(this);\r\n    this.updateHighpassCut = this.updateHighpassCut.bind(this);\r\n    this.toggleHighpass = this.toggleHighpass.bind(this);\r\n    this.updateAttack = this.updateAttack.bind(this);\r\n    this.updateDecay = this.updateDecay.bind(this);\r\n    this.updateSustain = this.updateSustain.bind(this);\r\n    this.updateRelease = this.updateRelease.bind(this);\r\n    this.updateOscillator = this.updateOscillator.bind(this);\r\n    this.addEffect = this.addEffect.bind(this);\r\n    this.removeEffect = this.removeEffect.bind(this);\r\n    this.refreshSynth = this.refreshSynth.bind(this);\r\n }\r\n\r\n  // Adds an event listener for keystrokes on the page's load\r\n  componentDidMount(){\r\n    document.addEventListener(\"keydown\", this.synthControl, false, async () => {\r\n      // Starts Tone.js\r\n      await Tone.start();\r\n    });\r\n    document.addEventListener(\"keyup\", this.synthOff, false);\r\n   }\r\n\r\n  // Removes the event listener when the page unloads to prevent leaks\r\n  componentWillUnmount(){\r\n    document.removeEventListener(\"keydown\", this.synthControl, false);\r\n    document.removeEventListener(\"keyup\", this.synthOff, false);\r\n   }\r\n\r\n  // Controls the synth given the keystroke\r\n  synthControl(event) {\r\n    const now = Tone.now();\r\n    var note = \"\";\r\n    var currOctave = 0;\r\n    var newOctave = 0;\r\n    if(event.key === \"a\" && !keyDown) {\r\n      note = \"C\" + this.synthState.Octave.toString();\r\n      synth.triggerAttack(note, now);\r\n      keyDown = true;\r\n    }\r\n    else if(event.key === \"s\" && !keyDown) {\r\n      note = \"D\" + this.synthState.Octave.toString();\r\n      synth.triggerAttack(note, now);\r\n      keyDown = true;\r\n    }\r\n    else if(event.key === \"d\" && !keyDown) {\r\n      note = \"E\" + this.synthState.Octave.toString();\r\n      synth.triggerAttack(note, now);\r\n      keyDown = true;\r\n    }\r\n    else if(event.key === \"f\" && !keyDown) {\r\n      note = \"F\" + this.synthState.Octave.toString();\r\n      synth.triggerAttack(note, now);\r\n      keyDown = true;\r\n    }\r\n    else if(event.key === \"g\" && !keyDown) {\r\n      note = \"G\" + this.synthState.Octave.toString();\r\n      synth.triggerAttack(note, now);\r\n      keyDown = true;\r\n    }\r\n    else if(event.key === \"h\" && !keyDown) {\r\n      note = \"A\" + this.synthState.Octave.toString();\r\n      synth.triggerAttack(note, now);\r\n      keyDown = true;\r\n    }\r\n    else if(event.key === \"j\" && !keyDown) {\r\n      note = \"B\" + this.synthState.Octave.toString();\r\n      synth.triggerAttack(note, now);\r\n      keyDown = true;\r\n    }\r\n    else if(event.key === \"k\" && !keyDown) {\r\n      currOctave = this.synthState.Octave;\r\n      currOctave = currOctave + 1;\r\n      note = \"C\" + currOctave.toString();\r\n      synth.triggerAttack(note, now);\r\n      keyDown = true;\r\n    }\r\n    else if(event.key === \"z\") {\r\n      // Lowers the octave of the note by 1 and resets the state to match\r\n      currOctave = this.synthState.Octave;\r\n      // Makes sure you aren't decreasing the octave to a negative\r\n      if (currOctave > 0) {\r\n        newOctave = currOctave - 1;\r\n        this.synthState.Octave = newOctave;\r\n      }\r\n    }\r\n    else if(event.key === \"x\") {\r\n      // Raises the octave of the note by 1 and resets the state to match\r\n      currOctave = this.synthState.Octave;\r\n      // Makes sure you aren't increasing octave too high (arbitrarily set at 7)\r\n      if (currOctave < 7) {\r\n        newOctave = currOctave + 1;\r\n        this.synthState.Octave = newOctave;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Turns the synth off once the key is released\r\n  synthOff(event){\r\n    const now = Tone.now();\r\n    // Create a string of possible keys that can be held\r\n    var allKeys = \"asdfghjk\";\r\n    if(allKeys.includes(event.key)) {\r\n      synth.triggerRelease(now);\r\n      keyDown = false;\r\n    }\r\n  }\r\n\r\n  // Updates the distortion given the slider\r\n  updateDistortion(event, value) {\r\n    distortion.distortion = value;\r\n    // Update the state (moves slider)\r\n    this.setState({Distortion: value});\r\n    // Make sure to call refreshSynth to reset to current state values\r\n    this.refreshSynth();\r\n  }\r\n\r\n  // Turns the distortion on or off\r\n  toggleDistortion(event) {\r\n    this.synthState.DistortionOn = event.target.checked;\r\n    // This allows the slider to move on the page itself\r\n    this.setState({DistortionOn: event.target.checked});\r\n    // If the distortion is turned off, reset the distortion slider\r\n    if (!this.synthState.DistortionOn) {\r\n      // Resets the distortion on the synth to 0\r\n      distortion.distortion = 0;\r\n      // Resets the state (will reset slider)\r\n      this.setState({Distortion: 0});\r\n      // Removes distortion from the effects list\r\n      this.removeEffect(\"distortion\");\r\n    }\r\n    // Otherwise, add distortion to the effects list\r\n    else {\r\n      this.addEffect(\"distortion\");\r\n    }\r\n  }\r\n\r\n  // Updates the reverb room size given the slider\r\n  updateReverbRoom(event, value) {\r\n    reverb.roomSize.input.value = value;\r\n    // Update state (moves slider)\r\n    this.setState({ReverbRoom: value});\r\n    // Make sure to call refreshSynth to reset to current state values\r\n    this.refreshSynth();\r\n  }\r\n\r\n  // Turns the reverb on or off\r\n  toggleReverb(event) {\r\n    this.synthState.ReverbOn = event.target.checked;\r\n    // This allows the slider to move on the page itself\r\n    this.setState({ReverbOn: event.target.checked});\r\n    // If the reverb is turned off, reset the reverb slider\r\n    if (!this.synthState.ReverbOn) {\r\n      // Resets the reverb's room size on the synth to 0\r\n      reverb.roomSize.input.value = 0;\r\n      // Resets the state (will reset slider)\r\n      this.setState({ReverbRoom: 0});\r\n      // Removes reverb from the effects list\r\n      this.removeEffect(\"reverb\");\r\n    }\r\n    // Otherwise, add reverb to the effects list\r\n    else {\r\n      this.addEffect(\"reverb\");\r\n    }\r\n  }\r\n\r\n  // Updates the vibrato frequency given the slider\r\n  updateVibratoFreq(event, value) {\r\n    vibrato.frequency.value = value;\r\n    // Update state (moves slier)\r\n    this.setState({VibratoFreq: value});\r\n    // Make sure to call refreshSynth to reset to current state values\r\n    this.refreshSynth();\r\n  }\r\n\r\n  // Updates the vibrato pitch given the slider\r\n  updateVibratoPitch(event, value) {\r\n    vibrato.depth.input.value = value;\r\n    // Update state (moves slier)\r\n    this.setState({VibratoPitch: value});\r\n    // Make sure to call refreshSynth to reset to current state values\r\n    this.refreshSynth();\r\n  }\r\n\r\n  // Turns the vibrato on or off\r\n  toggleVibrato(event) {\r\n    this.synthState.VibratoOn = event.target.checked;\r\n    // This allows the slider to move on the page itself\r\n    this.setState({VibratoOn: event.target.checked});\r\n    // If the vibrato is turned off, reset the two vibrato sliders\r\n    if (!this.synthState.VibratoOn) {\r\n      // Resets the vibrato level on the synth to 0\r\n      vibrato.frequency.value = 0;\r\n      vibrato.depth.input.value = 0;\r\n      // Resets the state (will reset slider)\r\n      this.setState({VibratoFreq: 0});\r\n      this.setState({VibratoPitch: 0});\r\n      // Removes vibrato from the effects list\r\n      this.removeEffect(\"vibrato\");\r\n    }\r\n    // Otherwise, add vibrato to the effects list\r\n    else {\r\n      this.addEffect(\"vibrato\");\r\n    }\r\n  }\r\n\r\n  // Updates the pitch shift given the slider\r\n  updatePitch(event, value) {\r\n    pitch.pitch = value;\r\n    // Update state (moves slider)\r\n    this.setState({Pitch: value});\r\n    // Make sure to call refreshSynth to reset to current state values\r\n    this.refreshSynth();\r\n  }\r\n\r\n  // Turns the pitch shift on or off\r\n  togglePitch(event) {\r\n    this.synthState.PitchOn = event.target.checked;\r\n    // This allows the slider to move on the page itself\r\n    this.setState({PitchOn: event.target.checked});\r\n    // If the pitch shift is turned off, reset the pitch shift slider\r\n    if (!this.synthState.PitchOn) {\r\n      // Resets the pitch shift on the synth to 0\r\n      pitch.pitch = 0;\r\n      // Resets the state (will reset slider)\r\n      this.setState({Pitch: 0});\r\n      // Removes pitch from the effects list\r\n      this.removeEffect(\"pitch\");\r\n    }\r\n    // Otherwise, add pitch to the effects list\r\n    else {\r\n      this.addEffect(\"pitch\");\r\n    }\r\n  }\r\n\r\n  // Updates the pan given the slider\r\n  updatePan(event, value) {\r\n    pan.pan.input.value = value;\r\n    // Update state (moves slider)\r\n    this.setState({Pan: value});\r\n    // Make sure to call refreshSynth to reset to current state values\r\n    this.refreshSynth();\r\n  }\r\n\r\n  // Turns the panner on or off\r\n  togglePan(event) {\r\n    this.synthState.PanOn = event.target.checked;\r\n    // This allows the slider to move on the page itself\r\n    this.setState({PanOn: event.target.checked});\r\n    // If the panner is turned off, reset the pan slider\r\n    if (!this.synthState.PanOn) {\r\n      // Resets the panner on the synth to 0\r\n      pan.pan.input.value = 0;\r\n      // Resets the state (will reset slider)\r\n      this.setState({Pan: 0});\r\n      // Removes pan from the effects list\r\n      this.removeEffect(\"pan\");\r\n    }\r\n    // Otherwise, add pan to the effects list\r\n    else {\r\n      this.addEffect(\"pan\");\r\n    }\r\n  }\r\n\r\n  // Updates the lowpass cutoff frequency given the slider\r\n  updateLowpassCut(event, value) {\r\n    lowpass.frequency.value = value;\r\n    // Update state (moves slider)\r\n    this.setState({LowpassCut: value});\r\n    // Make sure to call refreshSynth to reset to current state values\r\n    this.refreshSynth();\r\n  }\r\n\r\n  // Turns the lowpass filter on or off\r\n  toggleLowpass(event) {\r\n    this.synthState.LowpassOn = event.target.checked;\r\n    // This allows the slider to move on the page itself\r\n    this.setState({LowpassOn: event.target.checked});\r\n    // If the lowpass filter is turned off, reset the lowpass slider\r\n    if (!this.synthState.LowpassOn) {\r\n      // Resets the lowpass cutoff on the synth to 0\r\n      lowpass.frequency.value = 0;\r\n      // Resets the state (will reset slider)\r\n      this.setState({LowpassCut: 0});\r\n      // Removes lowpass filter from the effects list\r\n      this.removeEffect(\"lowpass\");\r\n    }\r\n    // Otherwise, add lowpass filter to the effects list\r\n    else {\r\n      this.addEffect(\"lowpass\");\r\n    }\r\n  }\r\n\r\n  // Updates the highpass cutoff frequency given the slider\r\n  updateHighpassCut(event, value) {\r\n    highpass.frequency.value = value;\r\n    // Update state (moves slider)\r\n    this.setState({HighpassCut: value});\r\n    // Make sure to call refreshSynth to reset to current state values\r\n    this.refreshSynth();\r\n  }\r\n\r\n  // Turns the highpass filter on or off\r\n  toggleHighpass(event) {\r\n    this.synthState.HighpassOn = event.target.checked;\r\n    // This allows the slider to move on the page itself\r\n    this.setState({HighpassOn: event.target.checked});\r\n    // If the highpass filter is turned off, reset the highpass slider\r\n    if (!this.synthState.HighpassOn) {\r\n      // Resets the highpass cutoff on the synth to 20000\r\n      highpass.frequency.value = 20000;\r\n      // Resets the state (will reset slider)\r\n      this.setState({HighpassCut: 20000});\r\n      // Removes highpass filter from the effects list\r\n      this.removeEffect(\"highpass\");\r\n    }\r\n    // Otherwise, add highpass filter to the effects list\r\n    else {\r\n      this.addEffect(\"highpass\");\r\n    }\r\n  }\r\n\r\n  // Updates the attack value of the envelope\r\n  updateAttack(event, value) {\r\n    attack = value;\r\n    // Update state (moves slider)\r\n    this.setState({Attack: value});\r\n    // Make sure to call refreshSynth to reset to current state values\r\n    this.refreshSynth();\r\n  }\r\n\r\n  // Updates the decay value of the envelope\r\n  updateDecay(event, value) {\r\n    decay = value;\r\n    // Update state (moves slider)\r\n    this.setState({Decay: value});\r\n    // Make sure to call refreshSynth to reset to current state values\r\n    this.refreshSynth();\r\n  }\r\n\r\n  // Updates the sustain value of the envelope\r\n  updateSustain(event, value) {\r\n    sustain = value;\r\n    // Update state (moves slider)\r\n    this.setState({Sustain: value});\r\n    // Make sure to call refreshSynth to reset to current state values\r\n    this.refreshSynth();\r\n  }\r\n\r\n  // Updates the release value of the envelope\r\n  updateRelease(event, value) {\r\n    release = value;\r\n    // Update state (moves slider)\r\n    this.setState({Release: value});\r\n    // Make sure to call refreshSynth to reset to current state values\r\n    this.refreshSynth();\r\n  }\r\n\r\n  // Changes the oscillator attached to the synth\r\n  updateOscillator(event) {\r\n    // Update the global variable to save these changes\r\n    oscillator = event.target.value;\r\n    // Updates the selected button on the page\r\n    if (event.target.value !== \"triangle\") {\r\n      this.setState({TriangleOsc: false});\r\n    }\r\n    else {\r\n      this.setState({TriangleOsc: true});\r\n    }\r\n    // Refresh the synth with the new oscillator\r\n    this.refreshSynth();\r\n  }\r\n\r\n  // Adds the effect to the effects list\r\n  addEffect(effect) {\r\n    effects.push(effect);\r\n  }\r\n\r\n  // Removes the effect from the effects list\r\n  removeEffect(effect) {\r\n    var index = effects.indexOf(effect);\r\n    // Splices the effect out of the list\r\n    effects.splice(index, 1);\r\n  }\r\n\r\n  // Updates the synth to match the current state\r\n  refreshSynth() {\r\n    // Resets the synth\r\n    synth = new Tone.AMSynth().toDestination();\r\n    // Add the effects to the synth\r\n    effects.forEach(effect => synth.connect(eval(effect)));\r\n    // Make sure the proper oscillator is used\r\n    synth.oscillator.type = oscillator;\r\n    // Set up the envelope\r\n    synth.envelope.attack = attack;\r\n    synth.envelope.decay = decay;\r\n    synth.envelope.sustain = sustain;\r\n    synth.envelope.release = release;\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <>\r\n        <Container className=\"controls-container\">\r\n          <Row className=\"section-header\">\r\n            <h5>Controls</h5>\r\n          </Row>\r\n          <Row className=\"controls\">\r\n            <p>Use keys a, s, d, f, g, h, j, and k to play notes</p>\r\n          </Row>\r\n          <Row className=\"controls\">\r\n            <p>The a key corresponds to a C note, s to D, and so on</p>\r\n          </Row>\r\n          <Row className=\"controls\">\r\n            <p>Use z to decrease the octave and x to increase the octave</p>\r\n          </Row>\r\n        </Container>\r\n\r\n        <br />\r\n\r\n        <Container className=\"effects-container\">\r\n          <Row className=\"section-header\">\r\n            <h5>Synth Effects</h5>\r\n          </Row>\r\n          <Row className=\"effects\">\r\n            <Col xs={2}>\r\n              <p>Distortion</p>\r\n              <Row className=\"slider\">\r\n                <Col xs={3}>\r\n                  <p>Level: </p>\r\n                </Col>\r\n                <Col className=\"bar\" sm={1}>\r\n                  <Slider\r\n                    orientation=\"vertical\"\r\n                    min={0}\r\n                    max={10}\r\n                    value={this.state.Distortion}\r\n                    step={0.1}\r\n                    onChange={this.updateDistortion}\r\n                    disabled={!this.synthState.DistortionOn}\r\n                    valueLabelDisplay=\"auto\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n            <Col className=\"switch\" xs={2}>\r\n              <Switch\r\n                onChange={this.toggleDistortion}\r\n                checked={this.state.DistortionOn}\r\n                color=\"primary\"\r\n              />\r\n            </Col>\r\n            <Col xs={2}>\r\n              <p>Reverb</p>\r\n              <Row className=\"slider\">\r\n                <Col xs={3}>\r\n                  <p>Level: </p>\r\n                </Col>\r\n                <Col className=\"bar\" sm={3}>\r\n                  <Slider\r\n                    orientation=\"vertical\"\r\n                    min={0}\r\n                    max={0.9}\r\n                    value={this.state.ReverbRoom}\r\n                    step={0.1}\r\n                    onChange={this.updateReverbRoom}\r\n                    disabled={!this.state.ReverbOn}\r\n                    valueLabelDisplay=\"auto\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n            <Col className=\"switch\" xs={2}>\r\n              <Switch\r\n                onChange={this.toggleReverb}\r\n                checked={this.synthState.ReverbOn}\r\n                color=\"primary\"\r\n              />\r\n            </Col>\r\n            <Col xs={2}>\r\n              <p>Vibrato</p>\r\n              <Row className=\"slider\">\r\n                <Col xs={3}>\r\n                  <p>Speed: </p>\r\n                </Col>\r\n                <Col className=\"bar\" sm={1}>\r\n                  <Slider\r\n                    orientation=\"vertical\"\r\n                    min={0}\r\n                    max={10}\r\n                    value={this.state.VibratoFreq}\r\n                    step={0.1}\r\n                    onChange={this.updateVibratoFreq}\r\n                    disabled={!this.state.VibratoOn}\r\n                    valueLabelDisplay=\"auto\"\r\n                  />\r\n                </Col>\r\n                <Col xs={3}>\r\n                  <p>Level: </p>\r\n                </Col>\r\n                <Col className=\"bar\" sm={1}>\r\n                  <Slider\r\n                    orientation=\"vertical\"\r\n                    min={0}\r\n                    max={1}\r\n                    value={this.state.VibratoPitch}\r\n                    step={0.1}\r\n                    onChange={this.updateVibratoPitch}\r\n                    disabled={!this.state.VibratoOn}\r\n                    valueLabelDisplay=\"auto\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n            <Col className=\"switch\" xs={2}>\r\n              <Switch\r\n                onChange={this.toggleVibrato}\r\n                checked={this.state.VibratoOn}\r\n                color=\"primary\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <br />\r\n          <Row className=\"effects\">\r\n            <Col xs={2}>\r\n              <p>Detune</p>\r\n              <Row className=\"slider\">\r\n                <Col xs={3}>\r\n                  <p>Level: </p>\r\n                </Col>\r\n                <Col className=\"bar\" sm={1}>\r\n                  <Slider\r\n                    orientation=\"vertical\"\r\n                    min={-24}\r\n                    max={24}\r\n                    value={this.state.Pitch}\r\n                    step={1}\r\n                    onChange={this.updatePitch}\r\n                    disabled={!this.synthState.PitchOn}\r\n                    valueLabelDisplay=\"auto\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n            <Col className=\"switch\" xs={2}>\r\n              <Switch\r\n                onChange={this.togglePitch}\r\n                checked={this.state.PitchOn}\r\n                color=\"primary\"\r\n              />\r\n            </Col>\r\n            <Col xs={2}>\r\n              <p>Pan</p>\r\n              <Row className=\"slider\">\r\n                <Col xs={3}>\r\n                  <p>Level: </p>\r\n                </Col>\r\n                <Col className=\"bar\" sm={3}>\r\n                  <Slider\r\n                    orientation=\"vertical\"\r\n                    min={-1}\r\n                    max={1}\r\n                    value={this.state.Pan}\r\n                    step={0.1}\r\n                    onChange={this.updatePan}\r\n                    disabled={!this.state.PanOn}\r\n                    valueLabelDisplay=\"auto\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n            <Col className=\"switch\" xs={2}>\r\n              <Switch\r\n                onChange={this.togglePan}\r\n                checked={this.synthState.PanOn}\r\n                color=\"primary\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <br />\r\n        <br />\r\n\r\n        <Container className=\"filter-container\">\r\n          <Row className=\"section-header\">\r\n            <h5>Filter Control</h5>\r\n          </Row>\r\n          <Row className=\"filters\">\r\n            <Col xs={2}>\r\n              <p>Lowpass</p>\r\n              <Row className=\"slider\">\r\n                <Col xs={3}>\r\n                  <p>Freq: </p>\r\n                </Col>\r\n                <Col className=\"bar\" sm={1}>\r\n                  <Slider\r\n                    orientation=\"vertical\"\r\n                    min={0}\r\n                    max={5000}\r\n                    value={this.state.LowpassCut}\r\n                    step={10}\r\n                    onChange={this.updateLowpassCut}\r\n                    disabled={!this.synthState.LowpassOn}\r\n                    valueLabelDisplay=\"auto\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n            <Col className=\"switch\" xs={2}>\r\n              <Switch\r\n                onChange={this.toggleLowpass}\r\n                checked={this.state.LowpassOn}\r\n                color=\"primary\"\r\n              />\r\n            </Col>\r\n            <Col xs={2}>\r\n              <p>Highpass</p>\r\n              <Row className=\"slider\">\r\n                <Col xs={3}>\r\n                  <p>Freq: </p>\r\n                </Col>\r\n                <Col className=\"bar\" sm={3}>\r\n                  <Slider\r\n                    orientation=\"vertical\"\r\n                    min={5000}\r\n                    max={20000}\r\n                    value={this.state.HighpassCut}\r\n                    step={10}\r\n                    onChange={this.updateHighpassCut}\r\n                    disabled={!this.state.HighpassOn}\r\n                    valueLabelDisplay=\"auto\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n            <Col className=\"switch\" xs={2}>\r\n              <Switch\r\n                onChange={this.toggleHighpass}\r\n                checked={this.synthState.HighpassOn}\r\n                color=\"primary\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <br />\r\n        <br />\r\n\r\n        <Container className=\"envelope-container\">\r\n          <Row className=\"section-header\">\r\n            <h5>Envelope Control</h5>\r\n          </Row>\r\n          <Row className=\"envelope-controls\">\r\n            <Col xs={1}>\r\n              <p>Attack: </p>\r\n            </Col>\r\n            <Col className=\"bar\" sm={1}>\r\n              <Slider\r\n                orientation=\"vertical\"\r\n                min={0}\r\n                max={2}\r\n                value={this.state.Attack}\r\n                step={0.1}\r\n                onChange={this.updateAttack}\r\n                valueLabelDisplay=\"auto\"\r\n              />\r\n            </Col>\r\n            <Col xs={1}>\r\n              <p>Decay: </p>\r\n            </Col>\r\n            <Col className=\"bar\" sm={1}>\r\n              <Slider\r\n                orientation=\"vertical\"\r\n                min={0}\r\n                max={2}\r\n                value={this.state.Decay}\r\n                step={0.1}\r\n                onChange={this.updateDecay}\r\n                valueLabelDisplay=\"auto\"\r\n              />\r\n            </Col>\r\n            <Col xs={1}>\r\n              <p>Sustain: </p>\r\n            </Col>\r\n            <Col className=\"bar\" sm={1}>\r\n              <Slider\r\n                orientation=\"vertical\"\r\n                min={0}\r\n                max={1}\r\n                value={this.state.Sustain}\r\n                step={0.1}\r\n                onChange={this.updateSustain}\r\n                valueLabelDisplay=\"auto\"\r\n              />\r\n            </Col>\r\n            <Col xs={1}>\r\n              <p>Release: </p>\r\n            </Col>\r\n            <Col className=\"bar\" sm={1}>\r\n              <Slider\r\n                orientation=\"vertical\"\r\n                min={0}\r\n                max={5}\r\n                value={this.state.Release}\r\n                step={0.1}\r\n                onChange={this.updateRelease}\r\n                valueLabelDisplay=\"auto\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <br />\r\n        <br />\r\n\r\n        <Container className=\"oscillator-container\">\r\n          <Row className=\"section-header\">\r\n            <h5>Oscillator Type</h5>\r\n          </Row>\r\n          <Row className=\"oscillators\">\r\n            <FormControl component=\"fieldset\">\r\n              <RadioGroup\r\n                aria-label=\"oscillators\"\r\n                name=\"oscillator\"\r\n                value={oscillator}\r\n                onChange={this.updateOscillator}\r\n                row\r\n              >\r\n                <FormControlLabel\r\n                  value=\"triangle\"\r\n                  control={<Radio />}\r\n                  label=\"Triangle\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"sine\"\r\n                  control={<Radio />}\r\n                  label=\"Sine\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"square\"\r\n                  control={<Radio />}\r\n                  label=\"Square\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"sawtooth\"\r\n                  control={<Radio />}\r\n                  label=\"Sawtooth\"\r\n                />\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </Row>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SynthPage;\r\n","import React, { Component } from 'react';\r\nimport { Container, Row } from 'react-bootstrap';\r\nimport Button from '@material-ui/core/Button';\r\nimport * as Tone from 'tone';\r\n\r\nclass HomePage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Binds function to page\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  // Starts the Tone library for the synth page\r\n  handleClick() {\r\n    Tone.start();\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <>\r\n        <Container className=\"welcome-container\">\r\n          <Row className=\"section-header\">\r\n            <h1>Welcome to M.U.S.I.C.</h1>\r\n          </Row>\r\n          <Row className=\"welcome\">\r\n            <p>M.U.S.I.C. stands for Malleable User-Created Synth Instant Creator</p>\r\n          </Row>\r\n          <Row className=\"welcome\">\r\n            <p>Basically, it's a tool that allows you to create and edit a synthesizer in a simple and accessible way</p>\r\n          </Row>\r\n          <Row className=\"welcome\">\r\n            <p>This tool was created as the final project for Professor Carter's Music270 at Hamilton College by Peter Kelly</p>\r\n          </Row>\r\n          <Row className=\"welcome\">\r\n            <p>It was written in Javascript using React and the Tone.js library</p>\r\n          </Row>\r\n          <Row className=\"welcome\">\r\n            <p>*NOTE* Tone.js is very computationally expensive, so if you hear any crackling in the audio, please refresh the page</p>\r\n          </Row>\r\n          <Row className=\"welcome\">\r\n            <a href=\"https://github.com/pxkelly/MUSIC\">Click me to go to the GitHub repository for the code</a>\r\n          </Row>\r\n          <br />\r\n          <br />\r\n          <Row className=\"welcome\">\r\n            <p>Otherwise, click this button to get started!</p>\r\n          </Row>\r\n          <Row className=\"welcome\">\r\n            <Button variant=\"contained\" color=\"primary\" href=\"#synth\" onClick={this.handleClick}>\r\n              Launch M.U.S.I.C.\r\n            </Button>\r\n          </Row>\r\n        </Container>\r\n\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React from 'react';\nimport { HashRouter, BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport SynthPage from \"./SynthPage.js\";\nimport HomePage from \"./HomePage.js\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst NoMatch = () => (\n  <div className = \"error\">\n  <h1> ERROR: Page not found </h1>\n  </div>\n);\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <Switch>\n        <Route exact path=\"/\" component={ HomePage } />\n        <Route path=\"/synth\" component={ SynthPage } />\n        <Route component={ NoMatch } />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}